{"version":3,"file":"SelectPaymentMethod-B49lvuz3.js","sources":["../../src/pages/SelectPaymentMethod.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport { fetchCards } from \"../api/cards\";\r\nimport buttonBack from \"../assets/images/Button-Back.png\";\r\nimport Loader from \"../components/ui/Loader\";\r\nimport {\r\n  StripeElements,\r\n  createPaymentRequest,\r\n  createPaymentIntent,\r\n  PaymentRequestButtonElement,\r\n  useStripe,\r\n} from \"../lib/stripeClient\";\r\n\r\ninterface Card {\r\n  id: number;\r\n  network: string | null;\r\n  last4: string;\r\n  isActive: boolean;\r\n}\r\n\r\nconst InnerSelectPaymentMethod: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const stripe = useStripe();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [cards, setCards] = useState<Card[]>([]);\r\n  const [fetchError, setFetchError] = useState<string>(\"\");\r\n  const [paymentRequest, setPaymentRequest] = useState<PaymentRequest | null>(null);\r\n\r\n  // simulate loader\r\n  useEffect(() => {\r\n    const t = setTimeout(() => setLoading(false), 500);\r\n    return () => clearTimeout(t);\r\n  }, []);\r\n\r\n  // initialize PaymentRequest for one-time $50.00 (5000Â¢) order\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!stripe) return;\r\n      try {\r\n        const pr = await createPaymentRequest({\r\n          country: \"US\",\r\n          currency: \"usd\",\r\n          total: { label: \"Your Order\", amount: 5000 },\r\n          requestPayerName: true,\r\n          requestPayerEmail: true,\r\n        });\r\n        pr.canMakePayment().then((result: any) => {\r\n          if (result) {\r\n            setPaymentRequest(pr);\r\n          }\r\n        });\r\n        pr.on(\"paymentmethod\", async (event: any) => {\r\n          // 1) ask backend for a one-time PaymentIntent:\r\n          try {\r\n            const clientSecret = await createPaymentIntent(5000);\r\n            // 2) confirm the PaymentIntent with Stripe using event.paymentMethod.id\r\n            const { error, paymentIntent } = await stripe.confirmCardPayment(\r\n              clientSecret,\r\n              { payment_method: event.paymentMethod.id }\r\n            );\r\n            if (error || !paymentIntent) {\r\n              event.complete(\"fail\");\r\n              console.error(\"PaymentIntent confirmation error:\", error);\r\n              return;\r\n            }\r\n            event.complete(\"success\");\r\n            // 3) navigate to PIN entry\r\n            navigate(\"/confirm-payment-pin\");\r\n          } catch (err) {\r\n            console.error(\"Error during PaymentRequest flow:\", err);\r\n            event.complete(\"fail\");\r\n          }\r\n        });\r\n      } catch (err) {\r\n        console.error(\"PaymentRequest init error:\", err);\r\n      }\r\n    })();\r\n  }, [stripe, navigate]);\r\n\r\n  // load saved cards after loader done\r\n  useEffect(() => {\r\n    if (loading) return;\r\n    (async () => {\r\n      try {\r\n        const data = await fetchCards();\r\n        setCards(data);\r\n      } catch (err) {\r\n        console.error(\"Failed to fetch saved cards:\", err);\r\n        setFetchError(\"Unable to load saved cards.\");\r\n      }\r\n    })();\r\n  }, [loading]);\r\n\r\n  const handleBackClick = () => navigate(-1);\r\n  const handleContinue = () => navigate(\"/confirm-payment-pin\");\r\n\r\n  if (loading) return <Loader />;\r\n\r\n  return (\r\n    <div className=\"bg-gray-100 min-h-screen pb-4\">\r\n      <div className=\"bg-blue-800 pt-4 pb-8\">\r\n        <div className=\"mx-auto max-w-[480px] px-4\">\r\n          <header className=\"flex items-center px-3 py-2\">\r\n            <button\r\n              onClick={handleBackClick}\r\n              className=\"mr-3 p-0 bg-transparent\"\r\n              aria-label=\"Go back\"\r\n            >\r\n              <img className=\"w-6 h-6\" src={buttonBack} alt=\"Back\" />\r\n            </button>\r\n            <h1 className=\"text-white text-lg font-medium\">Payment Method</h1>\r\n          </header>\r\n\r\n          <div className=\"bg-white pt-4 px-4 flex flex-col items-stretch mt-5 rounded-t-3xl h-[calc(100vh-90px)] overflow-y-auto\">\r\n            {paymentRequest && (\r\n              <div className=\"mb-4\">\r\n                <PaymentRequestButtonElement options={{ paymentRequest }} />\r\n              </div>\r\n            )}\r\n\r\n            {fetchError && (\r\n              <div className=\"text-sm p-2 border border-red-600 rounded text-red-600 bg-red-100 mb-3\">\r\n                {fetchError}\r\n              </div>\r\n            )}\r\n\r\n            {cards.length > 0 ? (\r\n              cards.map((card) => (\r\n                <div\r\n                  key={card.id}\r\n                  className=\"border-b-2 border-gray-200 px-0\"\r\n                >\r\n                  <div className=\"flex items-center gap-2 py-4 pr-8 cursor-pointer transition-colors hover:bg-gray-50\">\r\n                    <span className=\"flex items-center justify-center w-12 h-8 border border-gray-200 rounded\">\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"32\"\r\n                        height=\"20\"\r\n                        viewBox=\"0 0 32 20\"\r\n                        fill=\"none\"\r\n                      >\r\n                        <rect width=\"32\" height=\"20\" rx=\"3\" fill=\"#E0E0E0\" />\r\n                        <text\r\n                          x=\"16\"\r\n                          y=\"13\"\r\n                          textAnchor=\"middle\"\r\n                          fontSize=\"10\"\r\n                          fill=\"#333\"\r\n                        >\r\n                          {card.network}\r\n                        </text>\r\n                      </svg>\r\n                    </span>\r\n                    <div className=\"pl-4\">\r\n                      <div className=\"text-gray-800 text-base font-bold leading-6\">\r\n                        {card.network}\r\n                      </div>\r\n                      <div className=\"text-gray-500 text-sm font-medium leading-5\">\r\n                        <span className={card.isActive ? \"text-blue\" : \"text-red\"}>\r\n                          {card.isActive ? \"Active\" : \"Inactive\"}\r\n                        </span>{\" \"}\r\n                        | Card Number **** {card.last4}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p className=\"text-gray-500 my-3 text-sm\">No saved cards found.</p>\r\n            )}\r\n\r\n            <div className=\"mb-4\">\r\n              <Link to=\"/add-new-card\" className=\"text-blue text-base font-medium\">\r\n                + Link a New Card\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"flex items-center justify-center flex-col mt-auto mb-4\">\r\n              <div\r\n                className=\"w-full py-4 bg-white text-blue text-lg font-medium rounded-xl text-center cursor-pointer hover:bg-blue-50\"\r\n                onClick={handleContinue}\r\n              >\r\n                Continue\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SelectPaymentMethod: React.FC = () => (\r\n  <StripeElements>\r\n    <InnerSelectPaymentMethod />\r\n  </StripeElements>\r\n);\r\n\r\nexport default SelectPaymentMethod;\r\n"],"names":["InnerSelectPaymentMethod","navigate","useNavigate","stripe","useStripe","loading","setLoading","useState","cards","setCards","fetchError","setFetchError","paymentRequest","setPaymentRequest","useEffect","pr","createPaymentRequest","result","event","clientSecret","createPaymentIntent","error","paymentIntent","err","data","fetchCards","handleBackClick","handleContinue","jsx","Loader","jsxs","buttonBack","PaymentRequestButtonElement","card","Link","SelectPaymentMethod","StripeElements"],"mappings":"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"}