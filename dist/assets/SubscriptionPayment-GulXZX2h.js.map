{"version":3,"file":"SubscriptionPayment-GulXZX2h.js","sources":["../../src/pages/SubscriptionPayment.tsx"],"sourcesContent":["// src/pages/SubscriptionPayment.tsx\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Loader from \"@components/ui/Loader\";\r\nimport { StripeElements } from \"../lib/stripeClient\";\r\nimport {\r\n  createPaymentRequest,\r\n  createSubscriptionIntent,\r\n  PaymentRequestButtonElement,\r\n  useStripe,\r\n} from \"../lib/stripeClient\";\r\nimport { fetchCards } from \"../api/cards\";\r\nimport type { PaymentRequest as StripePaymentRequest } from \"@stripe/stripe-js\";\r\n\r\ninterface Card {\r\n  id: number;\r\n  network: string | null;\r\n  last4: string;\r\n  isActive: boolean;\r\n}\r\n\r\nconst SubscriptionPaymentForm: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const stripe = useStripe();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [cards, setCards] = useState<Card[]>([]);\r\n  const [fetchError, setFetchError] = useState<string>(\"\");\r\n  const [paymentRequest, setPaymentRequest] = useState<StripePaymentRequest | null>(null);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setLoading(false), 500);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  // Initialize PaymentRequest for Apple/Google Pay\r\n  useEffect(() => {\r\n    if (loading || !stripe) return;\r\n\r\n    (async () => {\r\n      try {\r\n        const pr = await createPaymentRequest({\r\n          country: \"US\",\r\n          currency: \"usd\",\r\n          total: { label: \"Subscription\", amount: 1000 },\r\n          requestPayerName: true,\r\n          requestPayerEmail: true,\r\n        });\r\n\r\n        if (await pr.canMakePayment()) {\r\n          setPaymentRequest(pr);\r\n        }\r\n\r\n        pr.on(\"paymentmethod\", async (event: any) => {\r\n          try {\r\n            // Create subscription intent using the payment method and amount\r\n            const { clientSecret, subscriptionId, status } = await createSubscriptionIntent(\r\n              event.paymentMethod.id,\r\n              \"1000\" // amount as a string\r\n            );\r\n\r\n            // Confirm the subscription payment\r\n            const { error, paymentIntent } = await stripe.confirmCardPayment(\r\n              clientSecret,\r\n              { payment_method: event.paymentMethod.id }\r\n            );\r\n\r\n            if (error || !paymentIntent) {\r\n              event.complete(\"fail\");\r\n              console.error(\"Subscription confirmation error:\", error);\r\n              return;\r\n            }\r\n\r\n            event.complete(\"success\");\r\n            navigate(\"/subscription-success\");\r\n          } catch (err) {\r\n            console.error(\"Error during PaymentRequest flow:\", err);\r\n            event.complete(\"fail\");\r\n          }\r\n        });\r\n      } catch (err) {\r\n        console.error(\"PaymentRequest init error:\", err);\r\n      }\r\n    })();\r\n  }, [loading, stripe, navigate]);\r\n\r\n  useEffect(() => {\r\n    if (loading) return;\r\n    (async () => {\r\n      try {\r\n        const data = await fetchCards();\r\n        setCards(data);\r\n      } catch (err) {\r\n        console.error(\"Failed to fetch saved cards:\", err);\r\n        setFetchError(\"Unable to load saved cards.\");\r\n      }\r\n    })();\r\n  }, [loading]);\r\n\r\n  if (loading) {\r\n    return <Loader fullscreen />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-gray-100 dark:bg-gray-900 min-h-screen pb-4 flex flex-col\">\r\n      <div className=\"mx-auto max-w-[480px] px-4\">\r\n        <div className=\"bg-white dark:bg-gray-800 pt-4 px-4 mt-5 rounded-t-3xl h-[calc(100vh-90px)] overflow-y-auto flex flex-col\">\r\n          {/* Apple/Google Pay Button */}\r\n          {paymentRequest ? (\r\n            <div className=\"mb-4\">\r\n              <PaymentRequestButtonElement options={{ paymentRequest }} />\r\n            </div>\r\n          ) : (\r\n            <div className=\"border-b-2 border-gray-200 dark:border-gray-700 mb-4 px-2 py-4\">\r\n              <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                Apple Pay / Google Pay not available. Use HTTPS or localhost and supported browser.\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Error Banner */}\r\n          {fetchError && (\r\n            <div className=\"text-sm p-2 border border-red-600 rounded text-red-600 bg-red-100 mb-3\">\r\n              {fetchError}\r\n            </div>\r\n          )}\r\n\r\n          {/* Saved Cards List */}\r\n          {cards.length > 0 ? (\r\n            <div className=\"flex-1 overflow-y-auto\">\r\n              {cards.map((card) => (\r\n                <div\r\n                  key={card.id}\r\n                  className=\"border-b-2 border-gray-200 dark:border-gray-700 px-0\"\r\n                >\r\n                  <div className=\"flex items-center gap-2 py-4 pr-8 transition-colors hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                    <span className=\"flex items-center justify-center w-12 h-8 border border-gray-200 dark:border-gray-700 rounded\">\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"32\"\r\n                        height=\"20\"\r\n                        viewBox=\"0 0 32 20\"\r\n                        fill=\"none\"\r\n                      >\r\n                        <rect width=\"32\" height=\"20\" rx=\"3\" fill=\"#E0E0E0\" />\r\n                        <text\r\n                          x=\"16\"\r\n                          y=\"13\"\r\n                          textAnchor=\"middle\"\r\n                          fontSize=\"10\"\r\n                          fill=\"#333\"\r\n                        >\r\n                          {card.network}\r\n                        </text>\r\n                      </svg>\r\n                    </span>\r\n                    <div className=\"pl-4\">\r\n                      <div className=\"text-gray-800 dark:text-gray-200 text-base font-bold leading-6\">\r\n                        {card.network}\r\n                      </div>\r\n                      <div className=\"text-gray-500 dark:text-gray-400 text-sm font-medium leading-5\">\r\n                        <span\r\n                          className={\r\n                            card.isActive\r\n                              ? \"text-blue-800 dark:text-primary\"\r\n                              : \"text-red-600\"\r\n                          }\r\n                        >\r\n                          {card.isActive ? \"Active\" : \"Inactive\"}\r\n                        </span>{\" \"}\r\n                        | Card Number **** {card.last4}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <p className=\"text-gray-500 dark:text-gray-400 my-3 text-sm\">\r\n              No saved cards found.\r\n            </p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SubscriptionPayment: React.FC = () => (\r\n  <StripeElements>\r\n    <SubscriptionPaymentForm />\r\n  </StripeElements>\r\n);\r\n\r\nexport default SubscriptionPayment;\r\n"],"names":["SubscriptionPaymentForm","navigate","useNavigate","stripe","useStripe","loading","setLoading","useState","cards","setCards","fetchError","setFetchError","paymentRequest","setPaymentRequest","useEffect","timer","pr","createPaymentRequest","event","clientSecret","subscriptionId","status","createSubscriptionIntent","error","paymentIntent","err","data","fetchCards","jsx","Loader","jsxs","PaymentRequestButtonElement","card","SubscriptionPayment","StripeElements"],"mappings":"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"}