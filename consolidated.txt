--- C:\Users\hanos\cb\frontend\postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
}


--- C:\Users\hanos\cb\frontend\tailwind.config.js ---
module.exports = {
  // Enable `dark:` variants based on the `.dark` class on <html> or <body>
  darkMode: 'class',

  content: [
    './public/index.html',
    './src/**/*.{js,jsx,ts,tsx}',
  ],

  theme: {
    extend: {
      colors: {
        primary: 'var(--color-primary)',
        white  : 'var(--color-white)',
      },

      fontFamily: {
        sans: ['"Readex Pro"', 'sans-serif'],
      },
    },
  },

  plugins: [],
};


--- C:\Users\hanos\cb\frontend\src\App.js ---
import React from "react";
import { BrowserRouter, Routes, Route } from "react-router-dom";

import Splash from "./pages/Splash.jsx";
import LetsYouIn from "./pages/LetsYouIn.jsx";
import NotificationAllow from "./pages/NotificationAllow.jsx";

import DentgoGptHome from "./pages/DentgoGptHome.jsx";
import DentgoChat from "./pages/DentgoChat.jsx";

import History from "./pages/History.jsx";
import BankCards from "./pages/BankCards.jsx";
import AddNewCard from "./pages/AddNewCard.jsx";
import PaymentMethod from "./pages/PaymentMethod.jsx";
import CancelSubscription from "./pages/CancelSubscription.jsx";
import PlusSubscription from "./pages/PlusSubscription.jsx";
import NotificationSetting from "./pages/NotificationSetting.jsx";
import Currency from "./pages/Currency.jsx";
import TermsAndPrivacy from "./pages/TermsAndPrivacy.jsx";
import Alert from "./pages/Alert.jsx";
import Confirmation from "./pages/Confirmation.jsx";
import ConfirmPaymentPin from "./pages/ConfirmPaymentPin.jsx";
import ContactUs from "./pages/ContactUs.jsx";
import SubscriptionPayment from "./pages/SubscriptionPayment.jsx";
import SelectPaymentMethod from "./pages/SelectPaymentMethod.jsx";
import Notification from "./pages/Notification.jsx";
import Delete from "./pages/Delete.jsx";

import PrivateRoute from "./components/PrivateRoute";

function App() {
  return (
    <BrowserRouter>
      <Routes>
        {/* Public flows */}
        <Route path="/" element={<Splash />} />
        <Route path="/LetsYouIn" element={<LetsYouIn />} />
        <Route path="/NotificationAllow" element={<NotificationAllow />} />

        {/* Protected flows */}
        <Route element={<PrivateRoute />}>
          <Route path="/DentgoGptHome" element={<DentgoGptHome />} />
          <Route path="/DentgoChat" element={<DentgoChat />} />
        </Route>

        {/* Other public pages */}
        <Route path="/History" element={<History />} />
        <Route path="/BankCards" element={<BankCards />} />
        <Route path="/AddNewCard" element={<AddNewCard />} />
        <Route path="/PaymentMethod" element={<PaymentMethod />} />
        <Route path="/CancelSubscription" element={<CancelSubscription />} />
        <Route path="/PlusSubscription" element={<PlusSubscription />} />
        <Route path="/NotificationSetting" element={<NotificationSetting />} />
        <Route path="/Currency" element={<Currency />} />
        <Route path="/TermsAndPrivacy" element={<TermsAndPrivacy />} />
        <Route path="/Alert" element={<Alert />} />
        <Route path="/Confirmation" element={<Confirmation />} />
        <Route path="/ConfirmPaymentPin" element={<ConfirmPaymentPin />} />
        <Route path="/ContactUs" element={<ContactUs />} />
        <Route path="/SubscriptionPayment" element={<SubscriptionPayment />} />
        <Route path="/SelectPaymentMethod" element={<SelectPaymentMethod />} />
        <Route path="/Notification" element={<Notification />} />
        <Route path="/Delete" element={<Delete />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;


--- C:\Users\hanos\cb\frontend\src\index.css ---
@import url('https://fonts.googleapis.com/css2?family=Readex+Pro:wght@400;500;600;700&display=swap');

:root {
  --color-primary     : #375066;
  --color-white       : #ffffff;

  --background-color  : var(--color-white);
  --text-color        : #333333;
}

.dark {
  --background-color  : #121212;
  --text-color        : #e0e0e0;
}

body {
  @apply bg-[var(--background-color)] text-[var(--text-color)] font-sans;
}

@tailwind base;
@tailwind components;
@tailwind utilities;


--- C:\Users\hanos\cb\frontend\src\index.js ---
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { DarkModeProvider } from "./components/DarkModeContext";
import { AuthProvider } from "./context/AuthContext";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <DarkModeProvider>
      <AuthProvider>
        <App />
      </AuthProvider>
    </DarkModeProvider>
  </React.StrictMode>
);

reportWebVitals();


--- C:\Users\hanos\cb\frontend\src\reportWebVitals.js ---
// src/reportWebVitals.js
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


--- C:\Users\hanos\cb\frontend\src\api\auth.js ---
// src/api/auth.js
const API_BASE = process.env.REACT_APP_SERVER_URL || '';

/* Google login */
export async function loginWithGoogle(credential) {
  const res = await fetch(`${API_BASE}/api/auth/google`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include', // Always include credentials
    body: JSON.stringify({ credential }),
  });
  if (!res.ok) {
    const body = await res.json().catch(() => ({}));
    throw new Error(body.error || 'Google login failed');
  }
  const { user } = await res.json();
  return user;
}

/* Apple login (redirect) */
export function loginWithApple() {
  window.location.href = `${API_BASE}/api/auth/apple`;
}

/* Logout */
export async function logout() {
  await fetch(`${API_BASE}/api/auth/logout`, {
    method: 'POST',
    credentials: 'include',
  }).catch(() => {});
}


--- C:\Users\hanos\cb\frontend\src\api\cards.js ---
// src/api/cards.js
const API_BASE = process.env.REACT_APP_SERVER_URL || '';

/* GET /api/cards */
export async function fetchCards() {
  const res = await fetch(`${API_BASE}/api/cards`, {
    method: 'GET',
    credentials: 'include',
  });
  if (!res.ok) throw new Error('Failed to fetch cards');
  return res.json();
}

/* GET /api/cards/:id */
export async function fetchCard(id) {
  const res = await fetch(`${API_BASE}/api/cards/${id}`, {
    method: 'GET',
    credentials: 'include',
  });
  if (!res.ok) throw new Error('Failed to fetch card');
  return res.json();
}

/* POST /api/cards */
export async function createCard({ paymentMethodId, nickName }) {
  const res = await fetch(`${API_BASE}/api/cards`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
    body: JSON.stringify({ paymentMethodId, nickName }),
  });
  if (!res.ok) {
    const body = await res.json().catch(() => ({}));
    throw new Error(body.error || 'Failed to create card');
  }
  return res.json();
}

/* PUT /api/cards/:id */
export async function updateCard(id, updates) {
  const res = await fetch(`${API_BASE}/api/cards/${id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
    body: JSON.stringify(updates),
  });
  if (!res.ok) {
    const body = await res.json().catch(() => ({}));
    throw new Error(body.error || 'Failed to update card');
  }
  return res.json();
}

/* DELETE /api/cards/:id */
export async function deleteCard(id) {
  const res = await fetch(`${API_BASE}/api/cards/${id}`, {
    method: 'DELETE',
    credentials: 'include',
  });
  if (!res.ok) {
    const body = await res.json().catch(() => ({}));
    throw new Error(body.error || 'Failed to delete card');
  }
}


--- C:\Users\hanos\cb\frontend\src\api\chat.js ---
const API_BASE = process.env.REACT_APP_SERVER_URL || '';

export async function askDentgo(prompt, history = [], sessionId = null, signal) {
  const res = await fetch(`${API_BASE}/api/chat`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
    body: JSON.stringify({ prompt, history, sessionId }),
    signal,
  });

  if (!res.ok) {
    const body = await res.json().catch(() => ({}));
    throw new Error(body.error || 'Chat failed');
  }
  return res.json();
}


--- C:\Users\hanos\cb\frontend\src\api\chats.js ---
const API_BASE = process.env.REACT_APP_SERVER_URL || '';

export async function fetchChatSessions() {
  const res = await fetch(`${API_BASE}/api/chats`, {
    method: 'GET',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
  });
  if (!res.ok) {
    const body = await res.json().catch(() => ({}));
    throw new Error(body.error || 'Failed to fetch chat sessions');
  }
  return res.json();
}

export async function fetchChatSession(id) {
  const res = await fetch(`${API_BASE}/api/chats/${id}`, {
    method: 'GET',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
  });
  if (!res.ok) {
    const body = await res.json().catch(() => ({}));
    throw new Error(body.error || 'Failed to fetch chat session');
  }
  return res.json();
}

export async function endChatSession(sessionId) {
  const res = await fetch(`${API_BASE}/api/chats/${sessionId}/end`, {
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
  });
  if (!res.ok) {
    const body = await res.json().catch(() => ({}));
    throw new Error(body.error || 'Failed to end chat session');
  }
}


--- C:\Users\hanos\cb\frontend\src\api\notifications.js ---
const NOTE_BASE = process.env.REACT_APP_SERVER_URL || '';

export async function fetchNotifications() {
  const res = await fetch(`${NOTE_BASE}/api/notifications`, {
    method: 'GET',
    credentials: 'include',
  });
  if (!res.ok) throw new Error('Failed to fetch notifications');
  return res.json();
}

export async function markNotificationSeen(id) {
  const res = await fetch(`${NOTE_BASE}/api/notifications/${id}/seen`, {
    method: 'POST',
    credentials: 'include',
  });
  if (!res.ok) throw new Error('Failed to mark notification as seen');
  return res.json();
}


--- C:\Users\hanos\cb\frontend\src\api\payments.js ---
// src/api/payments.js
import axios from 'axios';

const API_BASE = process.env.REACT_APP_SERVER_URL || '';

export async function createStripeCustomer() {
  const resp = await axios.post(
    `${API_BASE}/api/payments/create-customer`,
    {},
    {
      withCredentials: true,
      headers: { 'Content-Type': 'application/json' },
    }
  );
  return resp.data; // { customerId: 'cus_...' }
}

export async function createSubscription(priceId, paymentMethodId) {
  const resp = await axios.post(
    `${API_BASE}/api/payments/create-subscription`,
    { priceId, paymentMethodId },
    {
      withCredentials: true,
      headers: { 'Content-Type': 'application/json' },
    }
  );
  return resp.data;
}

export async function fetchActiveSubscription() {
  const resp = await axios.get(`${API_BASE}/api/subscriptions`, {
    withCredentials: true,
  });
  return resp.data;
}


--- C:\Users\hanos\cb\frontend\src\api\subscriptions.js ---
const SUB_BASE = process.env.REACT_APP_SERVER_URL || '';

export async function fetchSubscriptions() {
  const res = await fetch(`${SUB_BASE}/api/subscriptions`, {
    method: 'GET',
    credentials: 'include', // Send cookies!
  });
  if (!res.ok) throw new Error('Failed to fetch subscriptions');
  return res.json();
}

export async function fetchSubscription(id) {
  const res = await fetch(`${SUB_BASE}/api/subscriptions/${id}`, {
    method: 'GET',
    credentials: 'include',
  });
  if (!res.ok) throw new Error('Failed to fetch subscription');
  return res.json();
}

export async function createSubscription(data) {
  const res = await fetch(`${SUB_BASE}/api/subscriptions`, {
    method: 'POST',
    credentials: 'include',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error('Failed to create subscription');
  return res.json();
}

export async function updateSubscription(id, updates) {
  const res = await fetch(`${SUB_BASE}/api/subscriptions/${id}`, {
    method: 'PUT',
    credentials: 'include',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(updates),
  });
  if (!res.ok) throw new Error('Failed to update subscription');
  return res.json();
}

export async function deleteSubscription(id) {
  const res = await fetch(`${SUB_BASE}/api/subscriptions/${id}`, {
    method: 'DELETE',
    credentials: 'include',
  });
  if (!res.ok) throw new Error('Failed to delete subscription');
}


--- C:\Users\hanos\cb\frontend\src\components\DarkModeContext.jsx ---
// src/context/DarkModeContext.jsx
import { createContext, useContext, useState, useEffect } from 'react';

const DarkModeContext = createContext();

export const DarkModeProvider = ({ children }) => {
  const [isDarkMode, setIsDarkMode] = useState(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('darkMode') === 'true';
    }
    return false;
  });

  useEffect(() => {
    const htmlElement = document.documentElement;
    if (isDarkMode) {
      htmlElement.classList.add('dark');
      localStorage.setItem('darkMode', 'true');
    } else {
      htmlElement.classList.remove('dark');
      localStorage.setItem('darkMode', 'false');
    }
  }, [isDarkMode]);

  const toggleDarkMode = () => {
    setIsDarkMode(prev => !prev);
  };

  return (
    <DarkModeContext.Provider value={{ isDarkMode, toggleDarkMode }}>
      {children}
    </DarkModeContext.Provider>
  );
};

export const useDarkMode = () => useContext(DarkModeContext);


--- C:\Users\hanos\cb\frontend\src\components\Loader.jsx ---
import React from 'react';

const Loader = () => {
  return (
    <div className="flex items-center justify-center h-full">
      <div className="w-12 h-12 border-4 border-blue border-t-transparent rounded-full animate-spin" />
    </div>
  );
};

export default Loader;


--- C:\Users\hanos\cb\frontend\src\components\PrivateRoute.jsx ---
// src/components/PrivateRoute.jsx
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import Loader from '../components/Loader';

const PrivateRoute = () => {
  const { isAuthenticated, initializing } = useAuth();

  if (initializing) {
    return <Loader />;
  }

  return isAuthenticated
    ? <Outlet />
    : <Navigate to="/LetsYouIn" replace />;
};

export default PrivateRoute;


--- C:\Users\hanos\cb\frontend\src\context\AuthContext.jsx ---
// src/context/AuthContext.jsx
import React, { createContext, useContext, useState, useEffect } from 'react';
import { loginWithGoogle as loginWithGoogleAPI } from '../api/auth';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [initializing, setInitializing] = useState(true);
  const [error, setError] = useState(null);

  const API_BASE = process.env.REACT_APP_SERVER_URL || '';

  const fetchUser = async () => {
    try {
      let response = await fetch(`${API_BASE}/api/users/me`, {
        credentials: 'include',
        mode: 'cors',
        headers: { 'Content-Type': 'application/json' },
      });

      if (response.status === 401) {
        const refreshResp = await fetch(`${API_BASE}/api/auth/refresh`, {
          method: 'POST',
          credentials: 'include',
          mode: 'cors',
          headers: { 'Content-Type': 'application/json' },
        });

        if (refreshResp.ok) {
          response = await fetch(`${API_BASE}/api/users/me`, {
            credentials: 'include',
            mode: 'cors',
            headers: { 'Content-Type': 'application/json' },
          });
        }
      }

      if (response.ok) {
        const data = await response.json();
        setUser(data?.user || null);
      } else {
        setUser(null);
      }
    } catch (error) {
      console.error('AuthContext: Error fetching user:', error);
      setUser(null);
    } finally {
      setInitializing(false);
    }
  };

  useEffect(() => {
    fetchUser();
  }, []);

  const login = (userData) => {
    setUser(userData);
  };

  const loginWithGoogle = async (credential) => {
    setError(null);
    try {
      const user = await loginWithGoogleAPI(credential);
      setUser(user);
    } catch (err) {
      console.error('AuthContext: Google login error:', err);
      if (
        err.message.includes('AbortError') ||
        err.message.includes('NetworkError')
      ) {
        setError(
          'Google login may be blocked in Private Browsing Mode or due to browser settings. Please try using a standard browser window or allow third-party cookies.'
        );
      } else {
        setError(err.message || 'Google login failed. Please try again.');
      }
    }
  };

  const logout = async () => {
    try {
      const { logout } = await import('../api/auth');
      await logout();
      setUser(null);
    } catch (error) {
      console.error('AuthContext: Error logging out:', error);
      setUser(null);
    }
  };

  const isAuthenticated = Boolean(user);

  return (
    <AuthContext.Provider
      value={{
        user,
        login,
        loginWithGoogle,
        logout,
        isAuthenticated,
        initializing,
        error,
        setError,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);


--- C:\Users\hanos\cb\frontend\src\hooks\useGoogleIdentity.js ---
// src/hooks/useGoogleIdentity.js
import { useEffect } from 'react';

export default function useGoogleIdentity(callback) {
  useEffect(() => {
    const id = "google-identity-script";
    if (document.getElementById(id)) {
      callback?.();
      return;
    }

    const script = document.createElement("script");
    script.id = id;
    script.src = "https://accounts.google.com/gsi/client";
    script.async = true;
    script.defer = true;
    script.onload = () => {
      callback?.();
    };
    document.body.appendChild(script);
  }, [callback]);
}


--- C:\Users\hanos\cb\frontend\src\lib\apple.js ---
export const appleLogin = (apiBase) => {
  window.location.href = `${apiBase}/api/auth/apple`;
};


--- C:\Users\hanos\cb\frontend\src\lib\google.js ---
let loading = false;
export const loadGoogle = (cb) => {
  if (window.google?.accounts?.id) {
    cb();
    return;
  }
  if (loading) return;
  loading = true;
  const s = document.createElement('script');
  s.src = 'https://accounts.google.com/gsi/client';
  s.async = true;
  s.defer = true;
  s.onload = cb;
  document.body.appendChild(s);
};


--- C:\Users\hanos\cb\frontend\src\lib\stripeClient.js ---
// src\lib\stripeClient.js
import { loadStripe } from '@stripe/stripe-js';
import {
  Elements,
  PaymentRequestButtonElement,
  CardNumberElement,
  CardExpiryElement,
  CardCvcElement,
  useStripe,
  useElements,
} from '@stripe/react-stripe-js';

export const stripePromise = loadStripe(
  process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY
);

export const StripeElements = ({ children }) => (
  <Elements stripe={stripePromise}>{children}</Elements>
);

export const ElementsWrapper = StripeElements;

export async function createPaymentRequest(options) {
  const stripe = await stripePromise;
  return stripe.paymentRequest(options);
}

export {
  PaymentRequestButtonElement,
  CardNumberElement,
  CardExpiryElement,
  CardCvcElement,
  useStripe,
  useElements,
};


--- C:\Users\hanos\cb\frontend\src\pages\AddNewCard.jsx ---
import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import { createCard } from "../api/cards";
import buttonBack from "../assets/images/Button-Back.png";
import Loader from "../components/Loader";
import { Elements, CardElement, useStripe, useElements } from "@stripe/react-stripe-js";
import { stripePromise } from "../lib/stripeClient";

const API_BASE = process.env.REACT_APP_SERVER_URL || "";

const AddNewCardForm = () => {
  const navigate = useNavigate();
  const stripe = useStripe();
  const elements = useElements();

  const [loading, setLoading] = useState(true);
  const [cardName, setCardName] = useState("");
  const [error, setError] = useState("");
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    const t = setTimeout(() => setLoading(false), 500);
    return () => clearTimeout(t);
  }, []);

  const handleBack = () => navigate(-1);
  const handleCardNameChange = (e) => setCardName(e.target.value);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setSubmitting(true);

    try {
      await fetch(`${API_BASE}/api/payments/create-customer`, {
        method: "POST",
        credentials: "include",
      });

      if (!stripe || !elements) {
        setError("Stripe has not fully loaded. Please try again.");
        setSubmitting(false);
        return;
      }

      const cardElement = elements.getElement(CardElement);
      if (!cardElement) {
        setError("Card element not found.");
        setSubmitting(false);
        return;
      }

      const { token, error: stripeError } = await stripe.createToken(cardElement, {
        name: cardName,
      });

      if (stripeError) {
        setError(stripeError.message);
        setSubmitting(false);
        return;
      }

      if (!token?.id) {
        setError("Failed to generate card token.");
        setSubmitting(false);
        return;
      }

      await createCard({ paymentMethodId: token.id, nickName: cardName || null });
      navigate("/PaymentMethod");
    } catch (err) {
      console.error("AddNewCard error:", err);
      setError(err.message || "Failed to save card.");
      setSubmitting(false);
    }
  };

  if (loading) return <Loader />;

  return (
    <div className="bg-white dark:bg-gray-900 min-h-screen pb-4">
      <div className="bg-blue-800 pt-4 pb-8">
        <div className="mx-auto max-w-lg px-4">
          <div className="pt-2 flex items-center px-3">
            <button onClick={handleBack} className="mr-3 p-0" aria-label="Go back">
              <img className="inline-block w-6 h-auto" src={buttonBack} alt="Go back" />
            </button>
            <h1 className="text-white text-lg font-medium">Add New Card</h1>
          </div>

          <form
            className="bg-blue-800 pt-4 px-4 flex flex-col items-stretch mt-5 rounded-t-3xl h-[calc(100vh-90px)] overflow-y-auto"
            onSubmit={handleSubmit}
          >
            <div className="relative mb-3">
              <input
                type="text"
                id="cardName"
                autoComplete="off"
                required
                value={cardName}
                onChange={handleCardNameChange}
                placeholder=" "
                className="peer w-full border border-gray-200 dark:border-gray-700 rounded px-2 py-3 text-base font-medium text-gray-800 dark:text-gray-200 bg-white dark:bg-gray-800"
              />
              <label
                htmlFor="cardName"
                className="absolute top-1/2 left-3 -translate-y-1/2 text-sm text-gray-500 dark:text-gray-400 transition-all peer-focus:-top-2 peer-focus:left-2 peer-focus:text-xs peer-focus:text-gray-800 dark:peer-focus:text-gray-200 peer-valid:-top-2 peer-valid:left-2 peer-valid:text-xs peer-valid:text-gray-800 dark:peer-valid:text-gray-200 bg-white dark:bg-gray-800 px-1"
              >
                Card Name
              </label>
            </div>

            <div className="mb-3">
              <div className="w-full h-16 bg-gray-100 dark:bg-gray-800 border-2 border-gray-200 dark:border-gray-700 rounded-xl px-4 pt-5 text-lg text-gray-800 dark:text-gray-200">
                <CardElement
                  id="card-element"
                  options={{
                    style: {
                      base: {
                        fontSize: "18px",
                        color: "#374151",
                        fontFamily: "'Satoshi', sans-serif",
                        "::placeholder": { color: "#6B7280" },
                      },
                      invalid: { color: "#FF484D" },
                    },
                    hidePostalCode: true,
                  }}
                />
              </div>
            </div>

            {error && (
              <div
                className="text-sm p-2 border border-red-600 rounded bg-red-100 mb-3 text-red-600"
                role="alert"
                aria-live="assertive"
              >
                {error}
              </div>
            )}

            <div className="flex flex-col items-center justify-center">
              <button
                type="submit"
                className="fixed bottom-5 left-1/2 transform -translate-x-1/2 w-full max-w-sm bg-blue-100 dark:bg-gray-700 text-blue text-lg font-medium rounded-xl py-4 text-center disabled:opacity-50"
                disabled={submitting}
              >
                {submitting ? (
                  <>
                    <span
                      className="border-2 border-[rgba(255,255,255,0.3)] border-t-white rounded-full w-4 h-4 animate-spin inline-block mr-2 align-middle"
                      aria-hidden="true"
                    />
                    Adding…
                  </>
                ) : (
                  "Add My Card"
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

const AddNewCard = () => (
  <Elements stripe={stripePromise}>
    <AddNewCardForm />
  </Elements>
);

export default AddNewCard;


--- C:\Users\hanos\cb\frontend\src\pages\Alert.jsx ---
import React, { useEffect, useState } from "react";
import buttonBack from "../assets/images/Button-Back.png";
import alertImg from "../assets/images/alert-img.png";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../components/Loader";

const Alert = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  const handleBackClick = () => navigate(-1);
  const goToLetYouIn = () => navigate("/LetsYouIn");
  const goToHome = () => navigate("/DentgoGptHome");

  useEffect(() => {
    const t = setTimeout(() => setLoading(false), 500);
    return () => clearTimeout(t);
  }, []);

  if (loading) return <Loader />;

  return (
    <div className="bg-white dark:bg-gray-900 min-h-screen pb-4">
      <div className="bg-blue-700 pt-4 pb-8">
        <div className="mx-auto max-w-lg px-4">
          <div className="pt-2 flex items-center px-3">
            <button onClick={handleBackClick} className="mr-3">
              <img
                className="inline-block w-6 h-auto"
                src={buttonBack}
                alt="Go back"
              />
            </button>
            <h1 className="text-white text-lg font-medium">Alert</h1>
          </div>
          <div className="bg-primary pt-4 px-4 flex flex-col items-center mt-5 rounded-t-3xl h-screen overflow-y-auto">
            <div className="flex items-center justify-center">
              <img className="max-w-full pb-4" src={alertImg} alt="Alert" />
            </div>
            <h2 className="text-gray-800 dark:text-gray-200 text-center text-2xl font-semibold leading-8 pb-3">
              Sorry! Your Order Has Failed!
            </h2>
            <p className="text-gray-500 dark:text-gray-400 text-center text-lg leading-6 pb-5 my-4">
              Venenatis praesent lorem tincidunt morbi ultrices quis dolor. Pellentesque nulla.
            </p>

            <button
              onClick={goToLetYouIn}
              className="fixed bottom-24 left-1/2 transform -translate-x-1/2 w-full max-w-xs bg-blue-100 dark:bg-gray-700 text-center text-lg font-medium leading-6 rounded-lg py-4 z-10"
            >
              <Link to="/LetsYouIn" className="text-blue-700 dark:text-primary">
                Try Again
              </Link>
            </button>

            <button
              onClick={goToHome}
              className="fixed bottom-5 left-1/2 transform -translate-x-1/2 w-full max-w-xs bg-blue-700 text-white text-lg font-medium leading-6 rounded-lg py-4 z-10"
            >
              <Link to="/DentgoGptHome">Go to Home</Link>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Alert;


--- C:\Users\hanos\cb\frontend\src\pages\BankCards.jsx ---
import React, { useEffect, useState } from "react";
import buttonBack from "../assets/images/Button-Back.png";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../components/Loader";
import { fetchCards } from "../api/cards";

const BankCards = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [cards, setCards] = useState([]);
  const [fetchError, setFetchError] = useState("");

  const handleBackClick = () => navigate(-1);

  useEffect(() => {
    async function loadCards() {
      try {
        const fetchedCards = await fetchCards();
        setCards(fetchedCards);
      } catch (err) {
        console.error("Failed to fetch cards:", err);
        setFetchError("Unable to load saved cards.");
      } finally {
        setLoading(false);
      }
    }
    loadCards();
  }, []);

  if (loading) return <Loader />;

  return (
    <div className="bg-white dark:bg-gray-900 min-h-screen pb-4 flex flex-col">
      <div className="bg-blue-700 pt-4 pb-8">
        <div className="mx-auto max-w-lg px-4">
          <div className="pt-2 flex items-center px-3">
            <button onClick={handleBackClick} className="mr-3 p-0" aria-label="Go back">
              <img className="w-6 h-auto" src={buttonBack} alt="Go back" />
            </button>
            <h1 className="text-white text-lg font-medium">Banks &amp; Cards</h1>
          </div>
          <div className="bg-primary pt-4 px-4 flex flex-col items-stretch mt-5 rounded-t-3xl h-[calc(100vh-90px)] overflow-y-auto">
            {fetchError && (
              <div className="text-sm p-2 border border-red-400 rounded bg-red-100 mb-3 text-red-600">
                {fetchError}
              </div>
            )}

            {cards.length > 0 ? (
              cards.map((card) => (
                <Link to="/AddNewCard" key={card.id}>
                  <div className="border-b-2 border-gray-200 dark:border-gray-700 px-0">
                    <div className="flex items-center gap-2 py-4 pr-8 cursor-pointer">
                      <span className="w-8 h-8 flex items-center justify-center">
                        <svg></svg>
                      </span>
                      <div className="pl-4">
                        <div className="text-gray-800 dark:text-gray-200 text-base font-semibold leading-6">
                          {card.network || "Unknown Network"}
                        </div>
                        <div className="text-gray-500 dark:text-gray-400 text-sm font-medium leading-5">
                          <span className={card.isActive ? "text-blue-700" : "text-red-600"}>
                            {card.isActive ? "Active" : "Inactive"}
                          </span>{" "}
                          | Card Number **** {card.last4}
                        </div>
                      </div>
                    </div>
                  </div>
                </Link>
              ))
            ) : (
              <p className="text-gray-500 dark:text-gray-400 my-3 text-sm">
                No saved cards found.
              </p>
            )}

            <div className="flex flex-col items-center justify-center mt-auto">
              <Link
                to="/AddNewCard"
                className="fixed bottom-5 left-1/2 transform -translate-x-1/2 w-full max-w-sm bg-blue-100 dark:bg-gray-700 text-blue-700 dark:text-primary text-lg font-medium rounded-xl py-4 text-center hover:bg-blue-200 dark:hover:bg-gray-600"
              >
                + Link a New Card
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BankCards;


--- C:\Users\hanos\cb\frontend\src\pages\CancelSubscription.jsx ---
import React, { useEffect, useState } from "react";
import buttonBack from "../assets/images/Button-Back.png";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../components/Loader";

const CancelSubscription = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  const handleBackClick = () => {
    navigate(-1);
  };

  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 500);
    return () => clearTimeout(timer);
  }, []);

  if (loading) return <Loader />;

  return (
    <div className="bg-white dark:bg-gray-900 min-h-screen pb-4 flex flex-col">
      <div className="bg-blue-800 pt-4 pb-8">
        <div className="mx-auto max-w-lg px-4">
          <div className="pt-2 flex items-center px-3">
            <button onClick={handleBackClick} className="mr-3 p-0" aria-label="Go back">
              <img className="w-6 h-auto" src={buttonBack} alt="Go back" />
            </button>
            <h1 className="text-white text-lg font-medium">
              Dentgo GPT Plus Subscription
            </h1>
          </div>
          <div className="bg-blue-700 pt-4 px-4 flex flex-col items-stretch mt-5 rounded-t-3xl h-[calc(100vh-90px)] overflow-y-auto">
            <h2 className="text-white text-2xl font-semibold mb-6">
              Dentgo GPT Plus
            </h2>

            <div className="flex items-start gap-3 mb-6">
              <svg></svg>
              <div>
                <h3 className="text-white text-base font-semibold">
                  Premium Features
                </h3>
                <p className="text-gray-300 text-sm">
                  Plus subscribers have access to Dentgo GPT Pro and our latest
                  beta features.
                </p>
              </div>
            </div>

            <div className="flex items-start gap-3 mb-6">
              <svg></svg>
              <div>
                <h3 className="text-white text-base font-semibold">
                  Priority Access
                </h3>
                <p className="text-gray-300 text-sm">
                  You’ll be able to use Dentgo GPT even when demand is high.
                </p>
              </div>
            </div>

            <div className="flex items-start gap-3 mb-6">
              <svg></svg>
              <div>
                <h3 className="text-white text-base font-semibold">
                  Ultra Fast
                </h3>
                <p className="text-gray-300 text-sm">
                  Enjoy even faster response speeds when using Dentgo GPT Pro.
                </p>
              </div>
            </div>

            <div className="mt-auto flex flex-col items-center">
              <p className="text-gray-300 text-sm mb-4 text-center">
                Auto-renews for $25/month until canceled. Due date is 15 Dec
                2024
              </p>
              <Link
                to="/LetYouIn"
                className="w-full max-w-sm bg-white text-blue text-lg font-medium rounded-xl py-4 text-center hover:bg-gray-100"
              >
                Cancel My Subscription
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CancelSubscription;


--- C:\Users\hanos\cb\frontend\src\pages\Confirmation.jsx ---
import React, { useEffect, useState } from "react";
import buttonBack from "../assets/images/Button-Back.png";
import confirmationImg from "../assets/images/confirmation-img.png";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../components/Loader";

const Confirmation = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  const handleBackClick = () => {
    navigate(-1);
  };

  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 500);
    return () => clearTimeout(timer);
  }, []);

  if (loading) return <Loader />;

  return (
    <div className="bg-white dark:bg-gray-900 min-h-screen pb-4 flex flex-col">
      <div className="bg-blue-600 pt-4 pb-8">
        <div className="mx-auto max-w-lg px-4">
          <div className="pt-2 flex items-center px-3">
            <button onClick={handleBackClick} className="mr-3 p-0" aria-label="Go back">
              <img className="w-6 h-auto" src={buttonBack} alt="Go back" />
            </button>
            <h1 className="text-white text-lg font-medium">Confirmation</h1>
          </div>
          <div className="bg-blue-700 pt-4 px-4 flex flex-col items-center mt-5 rounded-t-3xl h-[calc(100vh-90px)] overflow-y-auto">
            <div className="flex items-center justify-center">
              <img className="max-w-full pb-4" src={confirmationImg} alt="Confirmation" />
            </div>
            <h2 className="text-gray-800 dark:text-gray-200 text-center text-2xl font-semibold leading-8 pb-3">
              Thank You For Your Subscriptions!
            </h2>
            <p className="text-gray-600 dark:text-gray-400 text-center text-lg leading-6 my-4">
              Sagittis sit ipsum tellus vitae dui sed. Elementum auctor magna et a montes.
            </p>
            <div className="fixed bottom-5 left-1/2 transform -translate-x-1/2 w-full max-w-sm bg-blue-100 text-blue-600 text-lg font-medium rounded-xl py-4 text-center hover:bg-blue-700 cursor-pointer">
              <Link to="/Alert">Go To Home</Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Confirmation;


--- C:\Users\hanos\cb\frontend\src\pages\ConfirmPaymentPin.jsx ---
import React, { useEffect, useState } from "react";
import buttonBack from "../assets/images/Button-Back.png";
import createNewPinImg from "../assets/images/create-new-pin-img.png";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../components/Loader";

const ConfirmPaymentPin = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  const handleBackClick = () => {
    navigate(-1);
  };

  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 500);
    return () => clearTimeout(timer);
  }, []);

  if (loading) {
    return <Loader />;
  }

  return (
    <div className="bg-white dark:bg-gray-900 min-h-screen pb-4 flex flex-col">
      <div className="bg-blue-600 pt-4 pb-8">
        <div className="mx-auto max-w-lg px-4">
          <div className="pt-2 flex items-center px-3">
            <button onClick={handleBackClick} className="mr-3 p-0" aria-label="Go back">
              <img className="w-6 h-auto" src={buttonBack} alt="Go back" />
            </button>
            <h1 className="text-white text-lg font-medium">Confirm Your Payment</h1>
          </div>
          <div className="bg-blue-700 pt-4 px-4 flex flex-col items-center mt-5 rounded-t-3xl h-[calc(100vh-90px)] overflow-y-auto">
            <img
              className="max-w-full pb-4"
              src={createNewPinImg}
              alt="Confirm payment"
            />
            <p className="text-gray-600 dark:text-gray-400 text-center text-lg leading-6 mb-8">
              Authentication is required to continue your payment.
            </p>
            <div className="fixed bottom-5 left-1/2 transform -translate-x-1/2 w-full max-w-sm bg-gray-100 dark:bg-gray-800 text-blue text-lg font-medium rounded-xl py-4 text-center hover:bg-gray-200 dark:hover:bg-gray-700 cursor-pointer">
              <Link to="/LetYouIn">Continue with Google or Apple</Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ConfirmPaymentPin;


--- C:\Users\hanos\cb\frontend\src\pages\ContactUs.jsx ---
import React, { useEffect, useState } from "react";
import buttonBack from "../assets/images/Button-Back.png";
import contactUsImg from "../assets/images/contact-us-img.png";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../components/Loader";

const ContactUs = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  const handleBackClick = () => {
    navigate(-1);
  };

  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 500);
    return () => clearTimeout(timer);
  }, []);

  if (loading) {
    return <Loader />;
  }

  return (
    <div className="bg-white dark:bg-gray-900 min-h-screen pb-4 flex flex-col">
      <div className="bg-blue-600 pt-4 pb-8">
        <div className="mx-auto max-w-lg px-4">
          <div className="pt-2 flex items-center px-3">
            <button
              onClick={handleBackClick}
              className="mr-3 p-0"
              aria-label="Go back"
            >
              <img className="w-6 h-auto" src={buttonBack} alt="Go back" />
            </button>
            <h1 className="text-white text-lg font-medium">Contact Us</h1>
          </div>
          <div className="bg-blue-700 pt-4 px-4 flex flex-col items-stretch mt-5 rounded-t-3xl h-[calc(100vh-90px)] overflow-y-auto">
            <h2 className="text-gray-900 dark:text-gray-100 text-center text-2xl font-semibold leading-9 mb-2">
              Contact Us
            </h2>
            <p className="text-gray-600 dark:text-gray-400 text-center text-lg leading-6 mb-6">
              If you face any trouble for item ordering feel free to contact us.
            </p>

            <div className="flex items-center gap-3 mb-4">
              <div className="flex-shrink-0">
                <svg></svg>
              </div>
              <a
                href="mailto:cs@dentgo.ai"
                className="text-gray-900 dark:text-gray-100 text-lg underline"
              >
                cs@dentgo.ai
              </a>
            </div>

            <div className="flex items-center gap-3 mb-6">
              <div className="flex-shrink-0">
                <svg></svg>
              </div>
              <a
                href="https://dentgo.ai"
                className="text-gray-900 dark:text-gray-100 text-lg underline"
              >
                dentgo.ai
              </a>
            </div>

            <div className="mt-6 w-full">
              <h2 className="text-gray-900 dark:text-gray-100 text-xl font-semibold mb-2">
                About Us
              </h2>
              <p className="text-gray-600 dark:text-gray-400 text-base leading-6 mb-2">
                DentGo is your intelligent dental assistant — designed to save you time and enhance patient care.
                It helps you quickly diagnose cases, build customized treatment plans, and identify the materials needed.
              </p>
              <p className="text-gray-600 dark:text-gray-400 text-base leading-6 mb-2">
                Whether you're managing a busy clinic or just starting out, DentGo streamlines your workflow and
                connects you with trusted suppliers that deliver right to your clinic's door.
              </p>
              <p className="text-gray-600 dark:text-gray-400 text-base leading-6">
                Powered by AI, DentGo turns complex decisions into clear, actionable steps — allowing you to focus more
                on your patients and less on logistics.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ContactUs;


--- C:\Users\hanos\cb\frontend\src\pages\Currency.jsx ---
import React, { useEffect, useState } from "react";
import buttonBack from "../assets/images/Button-Back.png";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../components/Loader";

const Currency = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  const handleBackClick = () => {
    navigate(-1);
  };

  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 500);
    return () => clearTimeout(timer);
  }, []);

  if (loading) {
    return <Loader />;
  }

  return (
    <div className="bg-white dark:bg-gray-900 min-h-screen pb-4">
      <div className="bg-blue-800 pt-4 pb-8">
        <div className="mx-auto max-w-lg px-4">
          <div className="flex items-center px-3 pt-2">
            <button onClick={handleBackClick} className="mr-3 p-0">
              <img className="h-8 w-auto" src={buttonBack} alt="Go back" />
            </button>
            <h1 className="m-0 text-white text-lg font-medium">Currency</h1>
          </div>

          <div className="bg-blue-700 mt-5 rounded-t-3xl pt-4 px-4 flex flex-col items-stretch h-[calc(100vh-90px)] overflow-y-auto">
            <div className="peer flex items-center gap-3 rounded border border-gray-200 dark:border-gray-700 p-3 mb-4">
              <input
                type="radio"
                name="currency"
                id="currency-usd"
                className="peer sr-only"
              />
              <label
                htmlFor="currency-usd"
                className="flex items-center gap-2 cursor-pointer text-gray-900 dark:text-gray-100 text-base font-medium peer-checked:bg-gray-900 dark:peer-checked:bg-gray-100 peer-checked:text-white dark:peer-checked:text-gray-900 peer-checked:rounded"
              >
                <svg></svg>
                USD
              </label>
            </div>

            <div className="peer flex items-center gap-3 rounded border border-gray-200 dark:border-gray-700 p-3 mb-4">
              <input
                type="radio"
                name="currency"
                id="currency-sar"
                className="peer sr-only"
              />
              <label
                htmlFor="currency-sar"
                className="flex items-center gap-2 cursor-pointer text-gray-900 dark:text-gray-100 text-base font-medium peer-checked:bg-gray-900 dark:peer-checked:bg-gray-100 peer-checked:text-white dark:peer-checked:text-gray-900 peer-checked:rounded"
              >
                <svg></svg>
                SAR
              </label>
            </div>

            <div className="peer flex items-center gap-3 rounded border border-gray-200 dark:border-gray-700 p-3 mb-4">
              <input
                type="radio"
                name="currency"
                id="currency-aed"
                className="peer sr-only"
              />
              <label
                htmlFor="currency-aed"
                className="flex items-center gap-2 cursor-pointer text-gray-900 dark:text-gray-100 text-base font-medium peer-checked:bg-gray-900 dark:peer-checked:bg-gray-100 peer-checked:text-white dark:peer-checked:text-gray-900 peer-checked:rounded"
              >
                <svg></svg>
                AED
              </label>
            </div>

            <div className="peer flex items-center gap-3 rounded border border-gray-200 dark:border-gray-700 p-3 mb-4">
              <input
                type="radio"
                name="currency"
                id="currency-qar"
                className="peer sr-only"
              />
              <label
                htmlFor="currency-qar"
                className="flex items-center gap-2 cursor-pointer text-gray-900 dark:text-gray-100 text-base font-medium peer-checked:bg-gray-900 dark:peer-checked:bg-gray-100 peer-checked:text-white dark:peer-checked:text-gray-900 peer-checked:rounded"
              >
                <svg></svg>
                QAR
              </label>
            </div>

            <div className="peer flex items-center gap-3 rounded border border-gray-200 dark:border-gray-700 p-3 border-b-0">
              <input
                type="radio"
                name="currency"
                id="currency-egp"
                className="peer sr-only"
              />
              <label
                htmlFor="currency-egp"
                className="flex items-center gap-2 cursor-pointer text-gray-900 dark:text-gray-100 text-base font-medium peer-checked:bg-gray-900 dark:peer-checked:bg-gray-100 peer-checked:text-white dark:peer-checked:text-gray-900 peer-checked:rounded"
              >
                <svg></svg>
                EGP
              </label>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Currency;


--- C:\Users\hanos\cb\frontend\src\pages\Delete.jsx ---
import React, { useEffect, useState } from "react";
import buttonBack from "../assets/images/Button-Back.png";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../components/Loader";

const Delete = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  const handleBackClick = () => {
    navigate(-1);
  };

  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 500);
    return () => clearTimeout(timer);
  }, []);

  if (loading) {
    return <Loader />;
  }

  return (
    <div className="bg-white dark:bg-gray-900 min-h-screen pb-4">
      <div className="bg-blue-800 pt-4 pb-8">
        <div className="mx-auto max-w-lg px-4">
          <div className="flex items-center pt-8 px-3">
            <button onClick={handleBackClick} className="mr-3 p-0">
              <img className="h-8 w-auto" src={buttonBack} alt="Go back" />
            </button>
            <h1 className="m-0 text-white text-lg font-medium">Delete Account</h1>
          </div>

          <div className="bg-blue-700 dark:bg-gray-800 mt-5 rounded-t-3xl pt-4 px-4 flex flex-col items-stretch overflow-y-auto">
            <h2 className="text-gray-900 dark:text-gray-200 text-lg font-semibold leading-6 pt-6">
              Why are you leaving PayFast?
            </h2>

            <p className="text-gray-500 dark:text-gray-400 text-sm font-medium leading-5 pb-6">
              We’re sorry to see you go! Authentication and account control are now handled via secure login.
            </p>

            <p className="text-gray-500 dark:text-gray-400 text-sm font-medium leading-5 pt-6 mb-9">
              Tapping “Delete Account” will redirect you to the centralized login to manage or confirm deletion.{" "}
              <span className="text-gray-900 dark:text-gray-200">Jessica Smith.</span>
            </p>

            <div className="flex flex-col items-center justify-center">
              <div className="w-full py-4 bg-blue-100 dark:bg-gray-700 text-blue-800 text-lg font-medium rounded-xl mb-4 flex justify-center items-center">
                <Link to="/LetYouIn">Delete Account</Link>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Delete;


--- C:\Users\hanos\cb\frontend\src\pages\DentgoChat.jsx ---
import React, { useEffect, useRef, useState } from "react";
import { Link, useLocation, useNavigate } from "react-router-dom";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import rehypeSanitize from "rehype-sanitize";
import { askDentgo } from "../api/chat";
import { fetchChatSession, endChatSession } from "../api/chats";
import buttonBack from "../assets/images/Button-Back.png";
import chatMenuImg from "../assets/images/chat-menu-img.png";
import Loader from "../components/Loader";
import bootstrap from "bootstrap/dist/js/bootstrap.bundle";

// Detect Arabic characters for RTL support
function isRTL(text) {
  return /[\u0600-\u06FF]/.test(text);
}

function MessageBubble({ text, type }) {
  const rtl = isRTL(text);

  // USER (personal) bubble: dark primary background, white text
  if (type === "personal") {
    return (
      <div
        className={`
          float-right 
          my-3 
          max-w-[80%] 
          bg-primary 
          text-white 
          p-3 
          text-sm 
          leading-5 
          font-sans 
          ${rtl ? "text-right" : "text-left"} 
          rounded-tl-2xl 
          rounded-tr-2xl 
          rounded-br-2xl 
          rounded-bl
        `}
        style={{ direction: rtl ? "rtl" : "ltr" }}
        aria-label="Your message"
      >
        <ReactMarkdown
          remarkPlugins={[remarkGfm]}
          rehypePlugins={[rehypeSanitize]}
        >
          {text}
        </ReactMarkdown>
      </div>
    );
  }

  // BOT bubble: light primary background, primary text
  return (
    <div
      className={`
        float-left 
        my-3 
        max-w-[80%] 
        bg-primary/10 
        text-primary 
        p-3 
        text-sm 
        leading-5 
        font-sans 
        ${rtl ? "text-right" : "text-left"} 
        rounded-tl-2xl 
        rounded-tr-2xl 
        rounded-bl-2xl 
        rounded-br
      `}
      style={{ direction: rtl ? "rtl" : "ltr" }}
      aria-label="Bot response"
    >
      <ReactMarkdown
        remarkPlugins={[remarkGfm]}
        rehypePlugins={[rehypeSanitize]}
      >
        {text}
      </ReactMarkdown>
    </div>
  );
}

export default function DentgoChat() {
  const navigate = useNavigate();
  const { search } = useLocation();

  const [loading, setLoading] = useState(true);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [isThinking, setThinking] = useState(false);
  const historyRef = useRef([]);
  const containerRef = useRef(null);
  const [sessionId, setSessionId] = useState(null);

  // On mount: check for sessionId in URL, fetch history if present
  useEffect(() => {
    const params = new URLSearchParams(search);
    const sid = params.has("sessionId")
      ? Number(params.get("sessionId"))
      : null;

    if (sid) {
      setSessionId(sid);
      fetchChatSession(sid)
        .then((session) => {
          const msgs = session.messages.map((m) => ({
            text: m.content,
            type: m.role === "USER" ? "personal" : "bot",
          }));
          setMessages(msgs);
          historyRef.current = msgs.map((m) => ({
            role: m.type === "personal" ? "user" : "assistant",
            text: m.text,
          }));
        })
        .catch(() => {
          // If fetch fails, we just proceed without initial history
        })
        .finally(() => setLoading(false));
    } else {
      setLoading(false);
    }
  }, [search]);

  // Scroll to bottom whenever messages or thinking state change
  useEffect(() => {
    if (containerRef.current) {
      containerRef.current.scrollTo({
        top: containerRef.current.scrollHeight,
        behavior: "smooth",
      });
    }
  }, [messages, isThinking]);

  // If not loading and no existing session, show greeting
  useEffect(() => {
    if (!loading && sessionId === null) {
      const greeting =
        "Hey, I'm Dentgo 😊 How can I assist with your dental cases today?";
      setMessages([{ text: greeting, type: "bot" }]);
      historyRef.current = [{ role: "assistant", text: greeting }];
    }
  }, [loading, sessionId]);

  // Send a new prompt
  const send = async () => {
    const prompt = input.trim();
    if (!prompt || isThinking) return;

    // Append user message immediately
    setMessages((prev) => [
      ...prev,
      { text: prompt, type: "personal" },
    ]);
    historyRef.current.push({ role: "user", text: prompt });
    setInput("");
    setThinking(true);

    try {
      const { sessionId: newSid, answer } = await askDentgo(
        prompt,
        historyRef.current.slice(0, -1),
        sessionId
      );

      // If this is the first question, update sessionId and URL
      if (!sessionId) {
        setSessionId(newSid);
        navigate(`?sessionId=${newSid}`, { replace: true });
      }

      // Append bot’s answer
      setMessages((prev) => [
        ...prev,
        { text: answer, type: "bot" },
      ]);
      historyRef.current.push({ role: "assistant", text: answer });
    } catch (err) {
      setMessages((prev) => [
        ...prev,
        { text: `❌ ${err.message}`, type: "bot" },
      ]);
    } finally {
      setThinking(false);
    }
  };

  if (loading) return <Loader />;

  return (
    <div className="bg-gray-100 min-h-screen pb-4 flex flex-col font-sans">
      {/* === HEADER === */}
      <header className="bg-primary pt-4 pb-8">
        <div className="mx-auto max-w-lg px-4">
          <div className="flex items-center px-2">
            {/* Back Button */}
            <button
              onClick={() => navigate(-1)}
              className="p-2 rounded-full hover:bg-primary/80 focus:outline-none focus:ring-2 focus:ring-white"
              aria-label="Go back"
            >
              <img
                src={buttonBack}
                alt="Back"
                className="h-8 w-auto"
              />
            </button>

            {/* Title */}
            <div className="flex-1 text-center">
              <h1 className="text-white text-lg font-medium">
                Dentgo
              </h1>
            </div>

            {/* Chat Menu Toggle */}
            <button
              className="p-2 rounded-full hover:bg-primary/80 focus:outline-none focus:ring-2 focus:ring-white"
              data-bs-toggle="offcanvas"
              data-bs-target="#chatOffcanvas"
              aria-label="Open chat menu"
            >
              <img
                src={chatMenuImg}
                alt="Menu"
                className="h-6 w-auto"
              />
            </button>
          </div>

          {/* Chat area */}
          <div className="bg-white mt-3 rounded-t-2xl pt-3 px-4 flex flex-col h-[calc(100vh-85px)] shadow-md">
            <div className="flex-1 flex flex-col">
              {/* OFFCANVAS MENU (right side) */}
              <div
                className="offcanvas offcanvas-end"
                id="chatOffcanvas"
                tabIndex="-1"
                aria-labelledby="chatOffcanvasLabel"
              >
                <div className="offcanvas-body bg-gray-100 p-0">
                  <Link
                    to="#"
                    className="block border-b border-gray-200 py-3 text-gray-800 px-4 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
                  >
                    Rename
                  </Link>
                  <Link
                    to="#"
                    className="block border-b border-gray-200 py-3 text-gray-800 px-4 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
                  >
                    Clear Chat
                  </Link>
                  <Link
                    to="#"
                    className="block border-b border-gray-200 py-3 text-gray-800 px-4 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
                  >
                    Export Chat
                  </Link>
                  <Link
                    to="#end-session-modal"
                    data-bs-toggle="modal"
                    className="block py-3 text-gray-800 px-4 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
                  >
                    End Session
                  </Link>
                </div>
              </div>

              {/* MESSAGE LIST */}
              <div className="flex-1 overflow-y-hidden relative">
                <div
                  className="overflow-y-auto max-h-[70vh] pr-2"
                  ref={containerRef}
                  aria-label="Chat messages"
                >
                  {messages.map((m, idx) => (
                    <MessageBubble key={idx} {...m} />
                  ))}

                  {isThinking && (
                    <div
                      className="
                        italic 
                        text-gray-500 
                        mt-2 
                        bg-primary/10 
                        text-primary 
                        rounded-tl-2xl 
                        rounded-tr-2xl 
                        rounded-bl-2xl 
                        rounded-br 
                        p-3 
                        my-3 
                        max-w-[80%] 
                        float-left
                      "
                      aria-label="Bot is typing"
                    >
                      <em>Dentgo is typing…</em>
                    </div>
                  )}
                </div>
              </div>

              {/* INPUT AREA */}
              <div className="flex gap-3 mt-2 pb-4">
                <div className="flex-1">
                  <textarea
                    className="
                      w-full 
                      h-12 
                      p-2 
                      rounded-lg 
                      border 
                      border-transparent 
                      bg-gray-100 
                      text-base 
                      text-gray-500 
                      resize-none 
                      focus:border-primary 
                      focus:bg-primary/10 
                      focus:outline-none 
                      focus:ring-2 
                      focus:ring-primary/50 
                      transition
                    "
                    placeholder="Write here…"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === "Enter" && !e.shiftKey) {
                        e.preventDefault();
                        send();
                      }
                    }}
                    aria-label="Type your message"
                  />
                </div>
                <button
                  className="
                    w-12 
                    h-12 
                    rounded-lg 
                    bg-primary 
                    text-white 
                    flex 
                    items-center 
                    justify-center 
                    hover:bg-primary/90 
                    focus:outline-none 
                    focus:ring-2 
                    focus:ring-primary/50 
                    transition
                  "
                  onClick={send}
                  disabled={isThinking}
                  aria-label="Send message"
                >
                  <svg></svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* === END SESSION MODAL === */}
      <div
        className="modal fade"
        id="end-session-modal"
        tabIndex="-1"
        aria-labelledby="endSessionModalLabel"
        aria-hidden="true"
      >
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-body text-center p-4">
              <h2
                id="endSessionModalLabel"
                className="text-gray-800 text-2xl font-semibold mb-2"
              >
                End Session
              </h2>
              <p className="text-gray-500 text-base mb-4">
                This session will be saved in history and can be retrieved
                anytime.
              </p>
              <div className="flex justify-center gap-3">
                <button
                  className="
                    bg-primary 
                    text-white 
                    px-6 
                    py-3 
                    rounded-xl 
                    text-lg 
                    font-medium 
                    hover:bg-primary/90 
                    focus:outline-none 
                    focus:ring-2 
                    focus:ring-primary/50 
                    transition
                  "
                  onClick={async () => {
                    if (sessionId) {
                      await endChatSession(sessionId);
                    }
                    const modalEl = document.getElementById(
                      "end-session-modal"
                    );
                    if (modalEl) {
                      const bsModal =
                        bootstrap.Modal.getInstance(modalEl);
                      if (bsModal) bsModal.hide();
                    }
                    navigate("/DentgoGptHome");
                  }}
                  aria-label="Confirm end session"
                >
                  Yes, End
                </button>
                <button
                  className="
                    bg-gray-100 
                    text-primary 
                    px-6 
                    py-3 
                    rounded-xl 
                    text-lg 
                    font-medium 
                    hover:bg-gray-200 
                    focus:outline-none 
                    focus:ring-2 
                    focus:ring-primary/50 
                    transition
                  "
                  data-bs-dismiss="modal"
                  aria-label="Cancel end session"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


--- C:\Users\hanos\cb\frontend\src\pages\DentgoGptHome.jsx ---
import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import logo from "../assets/images/logo.png";
import plusRobot from "../assets/images/plus-robort.png";
import { useDarkMode } from "../components/DarkModeContext";
import { useAuth } from "../context/AuthContext";

const DentgoGptHome = () => {
  const navigate = useNavigate();
  const { logout } = useAuth();
  const [isVisible, setIsVisible] = useState(false);

  // Clean up any lingering Bootstrap backdrop if re-navigating
  useEffect(() => {
    const backdrop = document.querySelector(".offcanvas-backdrop.show");
    if (backdrop) {
      backdrop.remove();
      document.body.classList.remove("offcanvas-backdrop", "modal-open");
    }
  }, []);

  const hidePopup = (e) => {
    e.preventDefault();
    setIsVisible(false);
  };

  const handlePlusSubscription = () => {
    navigate("/PlusSubscription");
  };

  const handleSignIn = () => {
    navigate("/DentgoChat");
  };

  return (
    <div className="bg-gray-100 min-h-screen flex flex-col font-sans">
      {/* ===== HEADER ===== */}
      <header className="relative bg-primary py-4">
        {/* Subtle bottom accent gradient */}
        <div className="absolute inset-x-0 bottom-0 h-1 bg-gradient-to-r from-primary/0 via-primary/50 to-primary/0" />

        <div className="mx-auto max-w-lg px-4 flex items-center justify-between">
          {/* Logo + Title */}
          <Link
            to="/DentgoGptHome"
            className="flex items-center gap-2 focus:outline-none focus:ring-2 focus:ring-white"
            aria-label="Dentgo Home"
          >
            <img src={logo} alt="Dentgo Logo" className="h-8 w-auto" />
            <span className="text-white text-lg font-medium">Dentgo</span>
          </Link>

          <div className="flex items-center gap-4">
            {/* Notification Icon */}
            <Link
              to="/Notification"
              className="relative p-2 rounded-full hover:bg-primary/80 focus:outline-none focus:ring-2 focus:ring-white"
              aria-label="View notifications"
            >
              <svg></svg>
              <span className="absolute -top-1 -right-1 w-4 h-4 flex items-center justify-center rounded-full bg-red-600 text-white text-xs">
                5
              </span>
            </Link>

            {/* Menu Button (Offcanvas toggle) */}
            <button
              className="p-2 rounded-full hover:bg-primary/80 focus:outline-none focus:ring-2 focus:ring-white"
              data-bs-toggle="offcanvas"
              data-bs-target="#offcanvasMenu"
              aria-label="Open menu"
            >
              <svg></svg>
            </button>
          </div>
        </div>
      </header>

      {/* ===== MAIN CONTENT ===== */}
      <main className="flex-1 bg-gray-100">
        <div className="mx-auto max-w-lg px-4">
          {/* Dentgo Plus Card */}
          <section
            className="mt-6 bg-white rounded-xl shadow-md overflow-hidden"
            aria-labelledby="dentgo-plus-title"
          >
            <div className="flex flex-col sm:flex-row">
              {/* Text + Button */}
              <div className="flex-1 p-6 space-y-2">
                <h2
                  id="dentgo-plus-title"
                  className="text-2xl font-semibold text-gray-800"
                >
                  Dentgo Plus
                </h2>
                <p className="text-gray-500 text-base">
                  Unlock Dentgo premium to access all features.
                </p>
                <button
                  onClick={handlePlusSubscription}
                  className="mt-4 inline-flex items-center justify-center bg-primary text-white font-medium text-base rounded-lg px-4 py-3 shadow hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
                  aria-label="Upgrade to Dentgo Plus"
                >
                  Upgrades
                </button>
              </div>

              {/* Image */}
              <div className="flex-1">
                <img
                  src={plusRobot}
                  alt="Plus robot illustration"
                  className="w-full h-auto object-cover"
                />
              </div>
            </div>
          </section>

          {/* Start Chat Button */}
          <div className="mt-8 flex justify-center">
            <button
              onClick={handleSignIn}
              className="w-full bg-primary text-white font-medium text-lg rounded-xl py-4 shadow hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
              aria-label="Start chat with Dentgo"
            >
              Start Chat with Dentgo
            </button>
          </div>
        </div>
      </main>

      {/* ===== OFFCANVAS MENU (moved out of header/main) ===== */}
      <div
        className="offcanvas offcanvas-start bg-gray-100"
        tabIndex="-1"
        id="offcanvasMenu"
        aria-labelledby="offcanvasMenuLabel"
      >
        <div className="flex items-center justify-between px-4 py-4 border-b border-gray-200">
          <h3 id="offcanvasMenuLabel" className="text-gray-800 font-medium text-base">
            Settings
          </h3>
          <button
            type="button"
            className="p-2 rounded-full hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-primary/50"
            data-bs-dismiss="offcanvas"
            aria-label="Close menu"
          >
            <svg></svg>
          </button>
        </div>

        <nav className="p-4 space-y-4">
          <Link
            to="/DentgoChat"
            className="flex items-center justify-between p-4 rounded-lg hover:bg-primary/10 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
            aria-label="New Chat"
          >
            <div className="flex items-center gap-4">
              <svg></svg>
              <span className="text-gray-800 font-medium text-base">New Chat</span>
            </div>
            <svg></svg>
          </Link>

          <Link
            to="/History"
            className="flex items-center justify-between p-4 rounded-lg hover:bg-primary/10 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
            aria-label="History"
          >
            <div className="flex items-center gap-4">
              <svg></svg>
              <span className="text-gray-800 font-medium text-base">History</span>
            </div>
            <svg></svg>
          </Link>

          <Link
            to="/BankCards"
            className="flex items-center justify-between p-4 rounded-lg hover:bg-primary/10 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
            aria-label="Banks & Cards"
          >
            <div className="flex items-center gap-4">
              <svg></svg>
              <span className="text-gray-800 font-medium text-base">Banks &amp; Cards</span>
            </div>
            <svg></svg>
          </Link>

          <Link
            to="/PaymentMethod"
            className="flex items-center justify-between p-4 rounded-lg hover:bg-primary/10 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
            aria-label="Payment Methods"
          >
            <div className="flex items-center gap-4">
              <svg></svg>
              <span className="text-gray-800 font-medium text-base">Payment Methods</span>
            </div>
            <svg></svg>
          </Link>

          <Link
            to="/CancelSubscription"
            className="flex items-center justify-between p-4 rounded-lg hover:bg-primary/10 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
            aria-label="Subscriptions"
          >
            <div className="flex items-center gap-4">
              <svg></svg>
              <span className="text-gray-800 font-medium text-base">Subscriptions</span>
            </div>
            <svg></svg>
          </Link>

          <Link
            to="/NotificationSetting"
            className="flex items-center justify-between p-4 rounded-lg hover:bg-primary/10 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
            aria-label="Notification Settings"
          >
            <div className="flex items-center gap-4">
              <svg></svg>
              <span className="text-gray-800 font-medium text-base">
                Notification Options
              </span>
            </div>
            <svg></svg>
          </Link>

          <Link
            to="/Currency"
            className="flex items-center justify-between p-4 rounded-lg hover:bg-primary/10 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
            aria-label="Currency"
          >
            <div className="flex items-center gap-4">
              <svg></svg>
              <span className="text-gray-800 font-medium text-base">Currency</span>
            </div>
            <span className="text-gray-500 font-medium">USD</span>
            <svg></svg>
          </Link>

          <Link
            to="/TermsAndPrivacy"
            className="flex items-center justify-between p-4 rounded-lg hover:bg-primary/10 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
            aria-label="Terms and Privacy"
          >
            <div className="flex items-center gap-4">
              <svg></svg>
              <span className="text-gray-800 font-medium text-base">
                Terms and Privacy
              </span>
            </div>
            <svg></svg>
          </Link>

          <Link
            to="/ContactUs"
            className="flex items-center justify-between p-4 rounded-lg hover:bg-primary/10 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
            aria-label="Contact Us"
          >
            <div className="flex items-center gap-4">
              <svg></svg>
              <span className="text-gray-800 font-medium text-base">Contact Us</span>
            </div>
            <svg></svg>
          </Link>

          {/* Delete Account (non-link) */}
          <div className="flex items-center justify-between p-4 rounded-lg hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-red-300 transition cursor-pointer">
            <div className="flex items-center gap-4">
              <svg></svg>
              <span className="text-gray-800 font-medium text-base">Delete Account</span>
            </div>
            <svg></svg>
          </div>

          {/* Logout (opens bottom offcanvas) */}
          <button
            type="button"
            className="w-full text-left flex items-center justify-between p-4 rounded-lg hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-red-300 transition"
            data-bs-toggle="offcanvas"
            data-bs-target="#offcanvasLogout"
            aria-label="Logout"
          >
            <div className="flex items-center gap-4">
              <svg></svg>
              <span className="text-gray-800 font-medium text-base">Logout</span>
            </div>
            <svg></svg>
          </button>
        </nav>
      </div>

      {/* ===== LOGOUT CONFIRMATION BOTTOM OFFCANVAS ===== */}
      <div
        className="offcanvas offcanvas-bottom bg-gray-100"
        tabIndex="-1"
        id="offcanvasLogout"
        aria-labelledby="offcanvasLogoutLabel"
      >
        <div className="px-4 py-4 flex items-center justify-end border-b border-gray-200">
          <button
            type="button"
            className="p-2 rounded-full hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-primary/50"
            data-bs-dismiss="offcanvas"
            aria-label="Close logout confirmation"
          >
            <svg></svg>
          </button>
        </div>
        <div className="p-6 text-center">
          <h2
            id="offcanvasLogoutLabel"
            className="text-gray-800 text-xl font-semibold mb-2"
          >
            Logout
          </h2>
          <p className="text-gray-500 mb-6">
            Are you sure you want to log out?
          </p>
          <div className="flex justify-center items-center gap-4">
            <button
              className="bg-white text-primary font-medium text-lg py-3 px-6 rounded-xl shadow hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
              data-bs-dismiss="offcanvas"
              aria-label="Cancel logout"
            >
              Cancel
            </button>
            <button
              type="button"
              onClick={async () => {
                await logout();
                navigate("/", { replace: true });
              }}
              className="bg-primary text-white font-medium text-lg py-3 px-6 rounded-xl shadow hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
              aria-label="Confirm logout"
            >
              Yes, Logout
            </button>
          </div>
        </div>
      </div>

      {/* ===== HOME SCREEN PROMO POPUP ===== */}
      {isVisible && (
        <>
          {/* Dimmed backdrop */}
          <div
            className="fixed inset-0 bg-black bg-opacity-50 z-50"
            onClick={hidePopup}
            aria-hidden="true"
          ></div>

          {/* Popup panel */}
          <div className="fixed bottom-0 left-1/2 transform -translate-x-1/2 w-full max-w-lg bg-white rounded-t-3xl z-60 p-6 shadow-lg">
            <button
              id="btnClose"
              onClick={hidePopup}
              className="absolute top-4 right-4 text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-primary/50"
              aria-label="Close popup"
            >
              <svg></svg>
            </button>
            <div className="text-center pt-4">
              <img
                src={logo}
                alt="Dentgo AI Chatbot Logo"
                className="mx-auto w-24 h-24"
              />
              <h3 className="text-gray-800 text-2xl font-semibold mt-4">
                Dentgo AI Chatbot
              </h3>
              <p className="mt-2 text-gray-500 text-base leading-6 px-2">
                Add the Dentgo Dental AI Assistant to your home screen for fast,
                seamless access—just like a regular app.
              </p>
              <div className="mt-6 flex justify-center">
                <button
                  className="inline-flex items-center bg-primary text-white text-lg font-medium py-3 px-6 rounded-lg shadow hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary/50 transition"
                  aria-label="Add Home Screen"
                >
                  Add Home Screen
                  <span className="ml-2">➔</span>
                </button>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default DentgoGptHome;


--- C:\Users\hanos\cb\frontend\src\pages\History.jsx ---
import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../components/Loader";
import buttonBack from "../assets/images/Button-Back.png";
import chatMenuImg from "../assets/images/chat-menu-img.png";
import { fetchChatSessions } from "../api/chats";

export default function History() {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [sessions, setSessions] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchChatSessions()
      .then((data) => setSessions(data))
      .catch((err) => setError(err.message || "Failed to load history"))
      .finally(() => setLoading(false));
  }, []);

  if (loading) {
    return <Loader />;
  }

  if (error) {
    return (
      <div className="bg-gray-100 min-h-screen pb-4 flex flex-col">
        <div className="bg-blue-800 pt-4 pb-8">
          <div className="mx-auto max-w-lg px-4">
            <button className="p-0 mb-3" onClick={() => navigate(-1)}>
              <img src={buttonBack} alt="Back" className="w-8 h-auto" />
            </button>
            <h2 className="text-red text-base font-medium">Error: {error}</h2>
          </div>
        </div>
      </div>
    );
  }

  const renderList = (items, isEnded) =>
    items.map((s) => (
      <Link
        key={s.id}
        to={`/DentgoChat?sessionId=${s.id}`}
        className="flex items-center mb-3"
      >
        <img
          src={chatMenuImg}
          alt="Chat icon"
          className="w-6 h-6 mr-3"
        />
        <div>
          <h3 className="text-gray-800 font-sans text-base font-bold leading-6 pb-1">
            {s.title ?? `Chat #${s.id}`}
          </h3>
          <p className="text-gray-500 text-sm leading-5">
            {isEnded
              ? `Ended ${new Date(s.endedAt).toLocaleString()}`
              : `Started ${new Date(s.startedAt).toLocaleString()}`}
          </p>
        </div>
      </Link>
    ));

  const active = sessions.filter((s) => !s.endedAt);
  const ended = sessions.filter((s) => !!s.endedAt);

  return (
    <div className="bg-gray-100 min-h-screen pb-4 flex flex-col">
      <div className="bg-blue-800 pt-4 pb-8">
        <div className="mx-auto max-w-lg px-4">
          <div className="flex items-center mb-4">
            <button className="p-0 mr-2" onClick={() => navigate(-1)}>
              <img src={buttonBack} alt="Back" className="w-8 h-auto" />
            </button>
            <h1 className="text-white text-lg font-medium leading-6">
              History
            </h1>
          </div>
        </div>
      </div>
      <div className="bg-white mt-5 rounded-t-3xl px-4 flex flex-col h-[calc(100vh-90px)] overflow-y-auto">
        <div className="pt-4">
          <h2 className="text-gray-800 text-xl font-semibold leading-7">
            Active Chats
          </h2>
          {active.length > 0 ? (
            renderList(active, false)
          ) : (
            <p className="text-gray-500 text-sm leading-5">
              No active chats.
            </p>
          )}
          <h2 className="text-gray-800 text-xl font-semibold leading-7 pt-6">
            Ended Chats
          </h2>
          {ended.length > 0 ? (
            renderList(ended, true)
          ) : (
            <p className="text-gray-500 text-sm leading-5">
              No ended chats.
            </p>
          )}
        </div>
      </div>
    </div>
  );
}


--- C:\Users\hanos\cb\frontend\src\pages\LetsYouIn.jsx ---
// src/pages/LetsYouIn.jsx
import React, { useEffect, useState, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import Loader from "../components/Loader";
import buttonBack from "../assets/images/Button-Back.png";
import logo from "../assets/images/logo-w.png";
import AppleIcon from "../assets/images/Icon-apple.png";
import GoogleIcon from "../assets/images/Icon-google.png";
import dentaiBottom from "../assets/images/dentaiBottom.png";

import useGoogleIdentity from "../hooks/useGoogleIdentity";
import { useAuth } from "../context/AuthContext";
import { loginWithGoogle as loginWithGoogleAPI, loginWithApple } from "../api/auth";

const CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID;

export default function LetsYouIn() {
  const navigate = useNavigate();
  const { login, isAuthenticated, error, setError, loginWithGoogle } = useAuth();
  const [loading, setLoading] = useState(true);
  const [googleReady, setGoogleReady] = useState(false);

  // Load Google's Identity Services script
  useGoogleIdentity();

  // If already authenticated, redirect immediately
  useEffect(() => {
    if (isAuthenticated) {
      navigate("/DentgoGptHome", { replace: true });
    }
  }, [isAuthenticated, navigate]);

  // Callback to handle credential response from Google
  const handleCredentialResponse = useCallback(
    async (response) => {
      const { credential } = response;
      if (!credential) {
        setError("No credentials returned. Please try again.");
        return;
      }

      try {
        // Send credential to backend, get user object
        const user = await loginWithGoogleAPI(credential);
        login(user); // store in context
        navigate("/DentgoGptHome", { replace: true });
      } catch (err) {
        console.error("Google login error:", err);
        setError(
          "Authentication failed. Please try again or use a different browser mode."
        );
      }
    },
    [login, navigate, setError]
  );

  // Initialize Google Identity Services client once script has loaded
  useEffect(() => {
    // Wait until the window.google.accounts.id object is available
    const tryInitialize = () => {
      if (window.google?.accounts?.id) {
        if (!CLIENT_ID) {
          console.error("Missing REACT_APP_GOOGLE_CLIENT_ID!");
          alert("Google Login misconfigured: missing client ID.");
          setLoading(false);
          return;
        }

        window.google.accounts.id.initialize({
          client_id: CLIENT_ID,
          callback: handleCredentialResponse,
          ux_mode: "popup",
        });

        setGoogleReady(true);
        setLoading(false);
      } else {
        // If still not loaded, retry after a short delay
        setTimeout(tryInitialize, 100);
      }
    };

    tryInitialize();
  }, [handleCredentialResponse]);

  if (loading) return <Loader />;

  return (
    <div className="bg-white h-screen w-full overflow-hidden flex flex-col relative">
      {/* Blue Header */}
      <div className="flex-none bg-primary relative">
        <header className="pt-6 px-4 flex items-center">
          <button
            onClick={() => navigate(-1)}
            className="p-0"
            aria-label="Go Back"
          >
            <img src={buttonBack} alt="Go Back" className="w-6 h-auto" />
          </button>
        </header>
        <div className="flex flex-col items-center justify-center py-4">
          <img
            src={logo}
            alt="Dentgo logo"
            className="w-24 h-auto object-contain"
          />
          <h1 className="text-white text-2xl font-semibold mt-3 text-center">
            DentGo AI
          </h1>
        </div>
      </div>

      {/* Welcome + Buttons */}
      <div className="flex-1 w-full flex flex-col items-center justify-start px-4 pt-4 relative z-10">
        <div className="w-full">
          <h2 className="text-center text-gray-800 text-2xl font-semibold mb-4">
            Welcome
          </h2>

          {error && (
            <div
              role="alert"
              className="bg-yellow-100 text-yellow-700 p-3 mb-4 rounded"
              onClick={() => setError(null)}
              onKeyDown={(e) => {
                if (e.key === "Enter" || e.key === " ") {
                  setError(null);
                }
              }}
              tabIndex={0}
            >
              {error}
            </div>
          )}

          <div className="flex flex-col gap-4 w-full">
            <button
              type="button"
              disabled={!googleReady}
              className={`flex items-center justify-center gap-3 w-full py-3 border border-gray-300 rounded-lg bg-white font-semibold text-base text-black transition ${
                googleReady
                  ? "hover:bg-gray-100"
                  : "opacity-50 cursor-not-allowed"
              }`}
              onClick={() => {
                if (window.google?.accounts?.id && googleReady) {
                  try {
                    window.google.accounts.id.prompt();
                  } catch (err) {
                    if (err.name !== "AbortError") {
                      console.error("Google prompt error:", err);
                      setError(
                        "Unexpected error when opening Google login. Please try again."
                      );
                    }
                  }
                } else {
                  alert("Google login is not ready yet.");
                }
              }}
            >
              <img src={GoogleIcon} alt="Google logo" className="w-5 h-5" />
              <span>Continue with Google</span>
            </button>

            <button
              type="button"
              className="flex items-center justify-center gap-3 w-full py-3 border border-gray-300 rounded-lg bg-white font-semibold text-base text-black transition hover:bg-gray-100"
              onClick={async () => {
                try {
                  const user = await loginWithApple();
                  login(user);
                  navigate("/DentgoGptHome", { replace: true });
                } catch (err) {
                  console.error("Apple login error:", err);
                  setError("Apple authentication failed. Please try again.");
                }
              }}
            >
              <img src={AppleIcon} alt="Apple logo" className="w-5 h-5" />
              <span>Continue with Apple</span>
            </button>
          </div>
        </div>
      </div>

      {/* Display only the dentaiBottom image in the lower third */}
      <div className="absolute bottom-0 left-0 w-full h-1/3 overflow-hidden">
        <img
          src={dentaiBottom}
          alt="Dental AI graphic"
          className="w-full h-full object-cover"
        />
      </div>
    </div>
  );
}


--- C:\Users\hanos\cb\frontend\src\pages\Notification.jsx ---
import React, { useEffect, useState } from "react";
import buttonBack from "../assets/images/Button-Back.png";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../components/Loader";

const Notification = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  const handleBackClick = () => {
    navigate(-1);
  };

  useEffect(() => {
    setTimeout(() => setLoading(false), 500);
  }, []);

  if (loading) {
    return <Loader />;
  }

  return (
    <div className="bg-gray-100 min-h-screen pb-4">
      <div className="bg-[#0078D7] pt-4 pb-8">
        <div className="mx-auto max-w-[480px] px-4">
          <div className="flex items-center">
            <button onClick={handleBackClick} className="p-0 mr-2">
              <img src={buttonBack} alt="Back" className="w-8 h-auto" />
            </button>
            <h1 className="text-white text-[18px] font-medium leading-[24px]">
              Notification
            </h1>
          </div>
        </div>
      </div>

      <div className="bg-white mt-5 rounded-t-[24px] px-4 flex flex-col gap-4 pb-4">
        <div className="flex items-center justify-between bg-white rounded-lg p-3">
          <div className="flex items-center gap-4">
            <div className="mt-3">
              <svg></svg>
            </div>
            <div>
              <h2 className="text-gray-800 font-satoshi text-[16px] font-bold leading-[24px]">
                Security Updates!
              </h2>
              <p className="text-gray-500 text-[14px] leading-[18px]">
                Today | 09:24 AM
              </p>
            </div>
          </div>
          <button className="px-3 py-2 bg-[#FF484D] text-white rounded">New</button>
        </div>
        <p className="text-gray-500 text-[12px] pt-3 pb-3 border-b-[2px] border-gray-200">
          Now Dentgo GPT has a Two-Factor Authentication. Try it now to make your account more secure.
        </p>

        <div className="flex items-center justify-between bg-white rounded-lg p-3">
          <div className="flex items-center gap-4">
            <div className="mt-3">
              <svg></svg>
            </div>
            <div>
              <h2 className="text-gray-800 font-satoshi text-[16px] font-bold leading-[24px]">
                Multiple Card Features!
              </h2>
              <p className="text-gray-500 text-[14px] leading-[18px]">
                1 day ago | 14:43 PM
              </p>
            </div>
          </div>
          <button className="px-3 py-2 bg-[#FF484D] text-white rounded">New</button>
        </div>
        <p className="text-gray-500 text-[12px] pt-3 pb-3 border-b-[2px] border-gray-200">
          Now you can also connect Dentgo GPT with multiple MasterCard & Visa. Try the service now.
        </p>

        <div className="flex items-center justify-between bg-white rounded-lg p-3">
          <div className="flex items-center gap-4">
            <div className="mt-3">
              <svg></svg>
            </div>
            <div>
              <h2 className="text-gray-800 font-satoshi text-[16px] font-bold leading-[24px]">
                New Updates Available!
              </h2>
              <p className="text-gray-500 text-[14px] leading-[18px]">
                2 days ago | 10:24 AM
              </p>
            </div>
          </div>
        </div>
        <p className="text-gray-500 text-[12px] pt-3 pb-3 border-b-[2px] border-gray-200">
          Update Dentgo GPT now to get access to the latest features for easier in making online payments.
        </p>

        <div className="flex items-center justify-between bg-white rounded-lg p-3">
          <div className="flex items-center gap-4">
            <div className="mt-3">
              <svg></svg>
            </div>
            <div>
              <h2 className="text-gray-800 font-satoshi text-[16px] font-bold leading-[24px]">
                Account Setup Successful!
              </h2>
              <p className="text-gray-500 text-[14px] leading-[18px]">
                10 Dec, 2023 | 14:24 AM
              </p>
            </div>
          </div>
        </div>
        <p className="text-gray-500 text-[12px] pt-3 pb-3 mb-5">
          Your account creation is successful, you can now experience our services.
        </p>
      </div>
    </div>
  );
};

export default Notification;


--- C:\Users\hanos\cb\frontend\src\pages\NotificationAllow.jsx ---
import React, { useEffect, useState } from "react";
import notificationImg from "../assets/images/notification-img.png";
import buttonBack from "../assets/images/Button-Back.png";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../components/Loader";

const NotificationAllow = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  const handleBackClick = () => {
    navigate(-1);
  };

  useEffect(() => {
    setTimeout(() => setLoading(false), 500);
  }, []);

  if (loading) {
    return <Loader />;
  }

  return (
    <div className="bg-gray-100 min-h-screen pb-4">
      <div className="bg-[#0078D7] pt-4 pb-8">
        <div className="mx-auto max-w-[480px] px-4">
          <div className="flex items-center">
            <button onClick={handleBackClick} className="p-0 mr-2">
              <img src={buttonBack} alt="Back" className="w-8 h-auto" />
            </button>
            <h1 className="text-white text-[18px] font-medium leading-[24px]">
              Notifications
            </h1>
          </div>
        </div>
      </div>

      <div className="bg-white mt-5 rounded-t-[24px] px-4 flex flex-col items-center">
        <img src={notificationImg} alt="notification" className="max-w-full mb-4" />
        <p className="text-gray-500 text-[18px] leading-[24px] text-center mb-6 px-2">
          Stay updated on offers, car listings, and status alerts. You can manage notifications from
          settings later.
        </p>
        <div className="w-full max-w-[343px] mb-4">
          <Link
            to="/LetYouIn"
            className="block bg-white text-[#0078D7] font-medium text-[18px] leading-[24px] text-center py-4 rounded-[12px] hover:bg-[#0064ba] transition"
          >
            Continue with Google or Apple
          </Link>
        </div>
      </div>
    </div>
  );
};

export default NotificationAllow;


--- C:\Users\hanos\cb\frontend\src\pages\NotificationSetting.jsx ---
import React, { useEffect, useState } from "react";
import buttonBack from "../assets/images/Button-Back.png";
import { useNavigate } from "react-router-dom";
import Loader from "../components/Loader";

const NotificationSetting = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  const handleBackClick = () => {
    navigate(-1);
  };

  useEffect(() => {
    setTimeout(() => setLoading(false), 500);
  }, []);

  if (loading) {
    return <Loader />;
  }

  return (
    <div className="bg-gray-100 min-h-screen pb-4">
      <div className="bg-[#0078D7] pt-4 pb-8">
        <div className="mx-auto max-w-[480px] px-4">
          <div className="flex items-center">
            <button onClick={handleBackClick} className="p-0 mr-2">
              <img src={buttonBack} alt="Back" className="w-8 h-auto" />
            </button>
            <h1 className="text-white text-[18px] font-medium leading-[24px]">
              Notification Settings
            </h1>
          </div>
        </div>
      </div>

      <div className="bg-white mt-5 rounded-t-[24px] px-4 pt-6 flex flex-col space-y-4">
        <h2 className="text-gray-800 text-[18px] font-semibold leading-[24px] text-center">
          We will notify you when...
        </h2>

        <div className="flex items-center justify-between border-b border-gray-200 py-4">
          <p className="text-gray-800 text-[16px] font-medium">Your invoices are paid</p>
          <input type="checkbox" name="invoice" />
        </div>

        <div className="flex items-center justify-between border-b border-gray-200 py-4">
          <p className="text-gray-800 text-[16px] font-medium">Someone requests money from you</p>
          <input type="checkbox" name="money-request" defaultChecked />
        </div>

        <div className="flex items-center justify-between border-b border-gray-200 py-4">
          <p className="text-gray-800 text-[16px] font-medium">You send money to someone</p>
          <input type="checkbox" name="money-sent" />
        </div>

        <div className="flex items-center justify-between border-b border-gray-200 py-4">
          <p className="text-gray-800 text-[16px] font-medium">You receive money from someone</p>
          <input type="checkbox" name="money-received" />
        </div>

        <div className="flex items-center justify-between border-b border-gray-200 py-4">
          <p className="text-gray-800 text-[16px] font-medium">You purchase something</p>
          <input type="checkbox" name="purchase" defaultChecked />
        </div>

        <div className="flex items-center justify-between border-b border-gray-200 py-4">
          <p className="text-gray-800 text-[16px] font-medium">You receive a QR code payment</p>
          <input type="checkbox" name="qr-payment" />
        </div>

        <div className="flex items-center justify-between border-b border-gray-200 py-4">
          <p className="text-gray-800 text-[16px] font-medium">You receive a direct payment</p>
          <input type="checkbox" name="direct-payment" />
        </div>

        <div className="flex items-center justify-between border-b border-gray-200 py-4">
          <p className="text-gray-800 text-[16px] font-medium">You receive subscriptions info</p>
          <input type="checkbox" name="subscription-info" />
        </div>

        <div className="flex items-center justify-between border-b-0 py-4">
          <p className="text-gray-800 text-[16px] font-medium">You receive announcements & offers</p>
          <input type="checkbox" name="announcements" defaultChecked />
        </div>

        <div className="flex items-center justify-between border-b-0 py-4">
          <p className="text-gray-800 text-[16px] font-medium">You receive app updates info</p>
          <input type="checkbox" name="app-updates" />
        </div>
      </div>
    </div>
  );
};

export default NotificationSetting;


--- C:\Users\hanos\cb\frontend\src\pages\PaymentMethod.jsx ---
import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { fetchCards } from "../api/cards";
import buttonBack from "../assets/images/Button-Back.png";
import Loader from "../components/Loader";

import {
  StripeElements,
  createPaymentRequest,
  PaymentRequestButtonElement,
} from "../lib/stripeClient";

const API_BASE = process.env.REACT_APP_SERVER_URL || "";

const PaymentMethodForm = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [cards, setCards] = useState([]);
  const [fetchError, setFetchError] = useState("");
  const [paymentRequest, setPaymentRequest] = useState(null);
  const [canMakePayment, setCanMakePayment] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 500);
    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    if (loading) return;
    async function loadCards() {
      try {
        const data = await fetchCards();
        setCards(data);
      } catch (err) {
        console.error("Failed to fetch saved cards:", err);
        setFetchError("Unable to load saved cards.");
      }
    }
    loadCards();
  }, [loading]);

  useEffect(() => {
    if (loading) return;
    (async () => {
      try {
        const pr = await createPaymentRequest({
          country: "US",
          currency: "usd",
          total: { label: "Save Card", amount: 0 },
          requestPayerEmail: true,
          requestPayerName: true,
        });
        pr.on("paymentmethod", async (event) => {
          event.complete("success");
        });
        if (await pr.canMakePayment()) {
          setPaymentRequest(pr);
          setCanMakePayment(true);
        }
      } catch (err) {
        console.error("PaymentRequest init error:", err);
      }
    })();
  }, [loading]);

  const handleBack = () => navigate(-1);
  const handleAddNew = () => navigate("/AddNewCard");

  if (loading) return <Loader />;

  return (
    <div className="bg-gray-100 min-h-screen pb-4 flex flex-col">
      <div className="bg-blue-800 pt-4 pb-8">
        <div className="mx-auto max-w-lg px-4">
          <header className="pt-8 flex items-center px-3">
            <button onClick={handleBack} className="mr-3 p-0" aria-label="Go back">
              <img
                className="inline-block w-8 h-auto"
                src={buttonBack}
                alt="Go Back"
              />
            </button>
            <h1 className="m-0 text-white text-lg font-medium">Payment Method</h1>
          </header>

          <div className="bg-white pt-4 px-4 flex flex-col items-stretch mt-5 rounded-t-3xl h-[calc(100vh-90px)] overflow-y-auto">
            {canMakePayment && paymentRequest ? (
              <div className="border-b-2 border-gray-200">
                <PaymentRequestButtonElement options={{ paymentRequest }} />
              </div>
            ) : (
              <div className="border-b-2 border-gray-200">
                <p className="text-sm text-gray-500 my-4">
                  Apple Pay / Google Pay currently unavailable
                </p>
                <small className="block text-xs text-gray-500 mb-4">
                  Make sure you’re on a supported browser (Safari for Apple Pay, Chrome for Google Pay),
                  using HTTPS or localhost, and that <code>REACT_APP_STRIPE_PUBLISHABLE_KEY</code> is set.
                </small>
              </div>
            )}

            {fetchError && (
              <div className="text-sm p-2 border border-red-600 rounded text-red-600 bg-red-100 mb-3">
                {fetchError}
              </div>
            )}

            {cards.length > 0 ? (
              cards.map((card) => (
                <div key={card.id} className="border-b-2 border-gray-200">
                  <div className="flex items-center gap-2 py-4 pr-8 cursor-pointer">
                    <span className="border border-gray-200 px-5 py-2 rounded flex items-center justify-center w-12 h-8">
                      <svg></svg>
                    </span>
                    <div className="pl-4">
                      <div className="text-gray-800 text-base font-semibold leading-6">
                        {card.network}
                      </div>
                      <div className="text-gray-500 text-sm font-medium leading-5">
                        <span className={card.isActive ? "text-blue-800" : "text-red"}>
                          {card.isActive ? "Active" : "Inactive"}
                        </span>{" "}
                        | Card Number **** {card.last4}
                      </div>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <p className="text-gray-500 my-3 text-sm">No saved cards found.</p>
            )}

            <div className="flex flex-col items-center justify-center">
              <div
                className="w-full bg-blue-800 text-white text-lg font-medium rounded-xl py-4 my-4 flex justify-center items-center transition hover:bg-blue-700 cursor-pointer"
                onClick={handleAddNew}
              >
                Add New Payment
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default function PaymentMethod() {
  return (
    <StripeElements>
      <PaymentMethodForm />
    </StripeElements>
  );
}


--- C:\Users\hanos\cb\frontend\src\pages\PlusSubscription.jsx ---
import React, { useEffect, useState } from "react";
import buttonBack from "../assets/images/Button-Back.png";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../components/Loader";

const PlusSubscription = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  const handleBackClick = () => {
    navigate(-1);
  };

  const handleSubscribe = () => {
    navigate("/SubscriptionPayment");
  };

  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 500);
    return () => clearTimeout(timer);
  }, []);

  if (loading) return <Loader />;

  return (
    <div className="bg-gray-100 min-h-screen pb-4 flex flex-col">
      <div className="bg-blue-800 pt-4 pb-8">
        <div className="mx-auto max-w-lg px-4">
          <header className="pt-8 flex items-center px-3">
            <button onClick={handleBackClick} className="mr-3 p-0" aria-label="Go back">
              <img
                className="w-8 h-auto"
                src={buttonBack}
                alt="Go Back"
              />
            </button>
            <h1 className="m-0 text-white text-lg font-medium">
              Dentgo Plus Subscription
            </h1>
          </header>

          <div className="bg-white pt-4 px-4 flex flex-col items-stretch mt-5 rounded-t-3xl h-[calc(100vh-90px)] overflow-y-auto">
            <div className="flex flex-col flex-1">
              <h2 className="text-gray-800 text-3xl font-bold leading-10 pt-2 pb-4">
                Dentgo Plus
              </h2>

              <div className="flex gap-4 pb-6">
                <div className="flex-shrink-0">
                  <svg></svg>
                </div>
                <div>
                  <h3 className="text-gray-800 text-2xl font-bold leading-7 pb-1">
                    Premium Dental AI Tools
                  </h3>
                  <p className="text-gray-500 text-lg leading-6">
                    Get access to advanced diagnosis, tailored treatment plans, and early beta features.
                  </p>
                </div>
              </div>

              <div className="flex gap-4 pb-6">
                <div className="flex-shrink-0">
                  <svg></svg>
                </div>
                <div>
                  <h3 className="text-gray-800 text-2xl font-bold leading-7 pb-1">
                    Priority Access
                  </h3>
                  <p className="text-gray-500 text-lg leading-6">
                    Enjoy uninterrupted access even when demand is high — no queues or wait times.
                  </p>
                </div>
              </div>

              <div className="flex gap-4 pb-6">
                <div className="flex-shrink-0">
                  <svg></svg>
                </div>
                <div>
                  <h3 className="text-gray-800 text-2xl font-bold leading-7 pb-1">
                    Faster Results
                  </h3>
                  <p className="text-gray-500 text-lg leading-6">
                    Get up to 10 detailed AI responses per hour — ideal for busy dental clinics.
                  </p>
                </div>
              </div>
            </div>

            <div className="mt-auto flex flex-col items-center">
              <p className="text-gray-500 text-lg leading-6 pb-6 text-center">
                Auto-renews at $25/month. Cancel anytime.
              </p>
              <div
                className="fixed bottom-5 left-1/2 transform -translate-x-1/2 w-full max-w-xs py-4 bg-white text-blue text-lg font-medium rounded-xl text-center cursor-pointer hover:bg-blue-100"
                onClick={handleSubscribe}
              >
                <Link to="/SubscriptionPayment">Subscribe</Link>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PlusSubscription;


--- C:\Users\hanos\cb\frontend\src\pages\SelectPaymentMethod.jsx ---
import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { fetchCards } from "../api/cards";
import buttonBack from "../assets/images/Button-Back.png";
import Loader from "../components/Loader";

import {
  StripeElements,
  createPaymentRequest,
  PaymentRequestButtonElement,
} from "../lib/stripeClient";

const InnerSelectPaymentMethod = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [cards, setCards] = useState([]);
  const [fetchError, setFetchError] = useState("");
  const [paymentRequest, setPaymentRequest] = useState(null);

  useEffect(() => {
    const t = setTimeout(() => setLoading(false), 500);
    return () => clearTimeout(t);
  }, []);

  // Initialize Apple/Google Pay
  useEffect(() => {
    async function initPaymentRequest() {
      try {
        const pr = await createPaymentRequest({
          country: "US",
          currency: "usd",
          total: { label: "Your Order", amount: 5000 },
          requestPayerName: true,
          requestPayerEmail: true,
        });
        pr.canMakePayment().then((result) => {
          if (result) {
            setPaymentRequest(pr);
          }
        });
        pr.on("paymentmethod", (ev) => {
          ev.complete("success");
          navigate("/ConfirmPaymentPin");
        });
      } catch (err) {
        console.error("PaymentRequest init error:", err);
      }
    }
    initPaymentRequest();
  }, [navigate]);

  // Fetch saved cards once loading is false
  useEffect(() => {
    if (loading) return;
    async function loadCards() {
      try {
        const data = await fetchCards();
        setCards(data);
      } catch (err) {
        console.error("Failed to fetch saved cards:", err);
        setFetchError("Unable to load saved cards.");
      }
    }
    loadCards();
  }, [loading]);

  const handleBackClick = () => navigate(-1);
  const handleContinue = () => navigate("/ConfirmPaymentPin");

  if (loading) return <Loader />;

  return (
    <div className="bg-gray-100 min-h-screen pb-4">
      <div className="bg-blue pt-4 pb-8">
        <div className="mx-auto max-w-[480px] px-4">
          <header className="flex items-center px-3 py-2">
            <button
              onClick={handleBackClick}
              className="mr-3 p-0 bg-transparent"
              aria-label="Go back"
            >
              <img className="w-6 h-6" src={buttonBack} alt="Back" />
            </button>
            <h1 className="text-white text-lg font-medium">Payment Method</h1>
          </header>

          <div className="bg-white pt-4 px-4 flex flex-col items-stretch mt-5 rounded-t-3xl h-[calc(100vh-90px)] overflow-y-auto">
            {paymentRequest && (
              <div className="mb-4">
                <PaymentRequestButtonElement options={{ paymentRequest }} />
              </div>
            )}

            {fetchError && (
              <div className="text-sm p-2 border border-red-600 rounded text-red-600 bg-red-100 mb-3">
                {fetchError}
              </div>
            )}

            {cards.length > 0 ? (
              cards.map((card) => (
                <div key={card.id} className="border-b-2 border-gray-200 px-0">
                  <div className="flex items-center gap-2 py-4 pr-8 cursor-pointer transition-colors hover:bg-gray-50">
                    <span className="flex items-center justify-center w-12 h-8 border border-gray-200 rounded">
                      <svg></svg>
                    </span>
                    <div className="pl-4">
                      <div className="text-gray-800 text-base font-bold leading-6">
                        {card.network}
                      </div>
                      <div className="text-gray-500 text-sm font-medium leading-5">
                        <span className={card.isActive ? "text-blue" : "text-red"}>
                          {card.isActive ? "Active" : "Inactive"}
                        </span>{" "}
                        | Card Number **** {card.last4}
                      </div>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <p className="text-gray-500 my-3 text-sm">No saved cards found.</p>
            )}

            <div className="mb-4">
              <Link to="/AddNewCard" className="text-blue text-base font-medium">
                + Link a New Card
              </Link>
            </div>

            <div className="flex items-center justify-center flex-col mt-auto mb-4">
              <div
                className="w-full py-4 bg-white text-blue text-lg font-medium rounded-xl text-center cursor-pointer hover:bg-blue-50"
                onClick={handleContinue}
              >
                Continue
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

const SelectPaymentMethod = () => (
  <StripeElements>
    <InnerSelectPaymentMethod />
  </StripeElements>
);

export default SelectPaymentMethod;


--- C:\Users\hanos\cb\frontend\src\pages\Splash.jsx ---
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import logo from "../assets/images/logo.png";
import dotsPattern from "../assets/images/dots_pattern.png";
import dotsPatternBottom from "../assets/images/dots_pattern_bottom.png";
import imageUnscreen from "../assets/images/Image.png";
import robotSlider from "../assets/images/robot-slider-img2.png";
import robotSlider3 from "../assets/images/robot-slider-img3.png";

const Splash = () => {
  const [activeSlide, setActiveSlide] = useState(0);

  const slides = [
    {
      id: 0,
      imgSrc: imageUnscreen,
      title: "Welcome to Dentgo, Your Smart Dental Assistant",
      content:
        "Diagnose cases accurately, build precise treatment plans, and get a tailored list of required materials with trusted suppliers — all in one place.",
    },
    {
      id: 1,
      imgSrc: robotSlider,
      title: "AI-Powered Treatment Planning in Seconds",
      content:
        "Let Dentgo analyze your cases and suggest complete, customized treatment plans backed by dental AI — helping you deliver better care, faster.",
    },
    {
      id: 2,
      imgSrc: robotSlider3,
      title: "Get What You Need — Delivered to Your Clinic",
      content:
        "Easily source the supplies and tools you need from top suppliers and have them delivered right to your door — saving you time and effort.",
    },
  ];

  const handleNext = () => {
    if (activeSlide < slides.length - 1) {
      setActiveSlide(activeSlide + 1);
    }
  };

  const [showSplash, setShowSplash] = useState(true);
  useEffect(() => {
    const splashTimer = setTimeout(() => {
      setShowSplash(false);
    }, 1500);
    return () => clearTimeout(splashTimer);
  }, []);

  return (
    <div className="bg-white h-screen w-full overflow-hidden">
      {showSplash && (
        <div className="fixed inset-0 bg-white z-50 flex flex-col items-center justify-center">
          <div className="relative h-full w-full flex flex-col items-center justify-center">
            <div className="absolute top-0 left-0">
              <img
                className="w-48 object-contain"
                src={dotsPattern}
                alt="Decorative pattern top"
              />
            </div>
            <div className="flex flex-col items-center">
              <img className="w-48 h-auto" src={logo} alt="Dentgo logo" />
              <h1 className="text-3xl font-bold mt-4 text-gray-800">Dentgo</h1>
              <p className="text-gray-500 text-center text-lg font-medium leading-6 mt-2">
                Smarter Dentistry Starts Here
              </p>
            </div>
            <div className="absolute bottom-0 left-0">
              <img
                className="w-48 object-contain"
                src={dotsPatternBottom}
                alt="Decorative pattern bottom"
              />
            </div>
          </div>
        </div>
      )}

      <div className="w-full h-full flex flex-col">
        <div className="flex-1 w-full flex flex-col">
          {slides.map((slide, index) => (
            <div
              key={slide.id}
              className={`${activeSlide === index ? "flex" : "hidden"} flex-1 flex-col items-center justify-between w-full h-full`}
            >
              <div className="flex flex-col items-center px-4 pt-8">
                <img
                  className="w-full max-w-xs mb-4"
                  src={slide.imgSrc}
                  alt={`Slide illustration for: ${slide.title}`}
                />
                <h2 className="text-center text-2xl font-bold text-gray-800 mb-2">
                  {slide.title}
                </h2>
                <p className="text-center text-base text-gray-500">
                  {slide.content}
                </p>
              </div>

              <div className="w-full px-4 pb-8">
                {index < slides.length - 1 ? (
                  <button
                    className="bg-primary text-white text-base font-medium py-3 w-full rounded transition hover:opacity-90"
                    onClick={handleNext}
                  >
                    Next
                  </button>
                ) : (
                  <Link to="/LetsYouIn">
                    <button
                      className="bg-primary text-white text-base font-medium py-3 w-full rounded transition hover:opacity-90"
                    >
                      Get Started
                    </button>
                  </Link>
                )}
              </div>
            </div>
          ))}
        </div>

        <div className="flex justify-center gap-2 mb-4">
          {slides.map((_, index) => (
            <button
              key={index}
              className={`rounded-full transition-all ${
                activeSlide === index
                  ? "bg-gray-800 w-8 h-2"
                  : "bg-gray-200 w-2 h-2"
              }`}
              onClick={() => setActiveSlide(index)}
            ></button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Splash;


--- C:\Users\hanos\cb\frontend\src\pages\SubscriptionPayment.jsx ---
import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import buttonBack from "../assets/images/Button-Back.png";
import logo from "../assets/images/logo.png";
import Loader from "../components/Loader";
import {
  ElementsWrapper,
  useStripe,
  PaymentRequestButtonElement,
} from "../lib/stripeClient";

const PaymentRequestSection = () => {
  const stripe = useStripe();
  const navigate = useNavigate();
  const [paymentRequest, setPaymentRequest] = useState(null);

  useEffect(() => {
    if (!stripe) return;

    const pr = stripe.paymentRequest({
      country: "US",
      currency: "usd",
      total: {
        label: "DentGo Plus Subscription",
        amount: 2500, // $25.00 in cents
      },
      requestPayerName: true,
      requestPayerEmail: true,
    });

    pr.canMakePayment().then((result) => {
      if (result) {
        setPaymentRequest(pr);
      }
    });
  }, [stripe]);

  useEffect(() => {
    if (!paymentRequest) return;

    paymentRequest.on("token", ({ complete, token }) => {
      // TODO: send token.id and subscription info to your backend
      console.log("✅ Received Stripe token for subscription:", token);
      complete("success");
      navigate("/ConfirmPaymentPin");
    });
  }, [paymentRequest, navigate]);

  if (!paymentRequest) return null;

  return (
    <div className="w-full mb-4">
      <PaymentRequestButtonElement
        options={{
          paymentRequest,
          style: {
            paymentRequestButton: {
              type: "buy",
              theme: "dark",
              height: "48px",
            },
          },
        }}
      />
    </div>
  );
};

const SubscriptionPayment = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  const handleBackClick = () => {
    navigate(-1);
  };

  const handleProceedToCheckout = () => {
    navigate("/ConfirmPaymentPin");
  };

  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 500);
    return () => clearTimeout(timer);
  }, []);

  if (loading) {
    return <Loader />;
  }

  return (
    <div className="bg-gray-100 min-h-screen pb-4 flex flex-col">
      <ElementsWrapper>
        <div className="bg-blue-800 pt-4 pb-8">
          <div className="mx-auto max-w-lg px-4">
            <div className="flex items-center space-x-3 px-3 py-2">
              <button
                type="button"
                onClick={handleBackClick}
                className="p-0"
                aria-label="Go Back"
              >
                <img className="w-6 h-6" src={buttonBack} alt="Go Back" />
              </button>
              <h1 className="text-white text-lg font-medium">
                DentGo Plus Subscription
              </h1>
            </div>
            <div className="bg-white pt-4 px-4 flex flex-col items-stretch mt-5 rounded-t-3xl flex-1 overflow-y-auto">
              <div className="flex justify-center mb-4">
                <img className="w-24 h-auto" src={logo} alt="logo" />
              </div>
              <h2 className="text-center text-xl font-semibold text-gray-800 leading-7 mb-2">
                DentGo Plus Subscription
              </h2>
              <p className="text-center text-sm text-gray-500 mb-4">
                Subscription Due at 15 Dec 2024
              </p>
              <h2 className="text-center text-5xl font-medium text-gray-800 leading-none mb-4">
                $25.00
              </h2>
              <p className="text-center text-sm text-gray-500 mb-4">
                Choose a card or bank for payout
              </p>

              <PaymentRequestSection />

              <p className="text-center text-sm text-gray-500 mb-4">
                Or select a saved payment method
              </p>
              <div className="flex items-center justify-between w-full mb-4">
                <div className="flex w-full items-center gap-2">
                  <span className="border border-gray-200 p-2 rounded w-12 h-8 flex items-center justify-center">
                    <svg></svg>
                  </span>
                  <div className="pl-4">
                    <div className="text-gray-800 text-base font-semibold leading-6">
                      Master Card
                    </div>
                    <div className="text-gray-500 text-sm font-medium leading-5">
                      Card Number **** 7887
                    </div>
                  </div>
                </div>
                <Link
                  to="#finger-print-modal"
                  data-bs-toggle="modal"
                  className="text-gray-800 text-2xl"
                >
                  <i className="ri-arrow-down-s-line"></i>
                </Link>
              </div>

              <div className="mb-4">
                <p className="text-sm text-gray-500 mb-2">Promo Code</p>
                <div>
                  <div className="relative mb-4">
                    <input
                      type="number"
                      id="promo_code"
                      className="w-full h-16 bg-gray-200 border-2 border-gray-200 rounded-xl px-4 pt-4 text-lg text-gray-800 focus:border-blue outline-none"
                      autoComplete="off"
                      required
                    />
                    <label
                      htmlFor="promo_code"
                      className="absolute left-4 top-1/2 -translate-y-1/2 text-base text-gray-500 transition-all"
                    >
                      Enter Code Here
                    </label>
                  </div>
                </div>
              </div>

              <div className="mt-auto"></div>
            </div>
          </div>
        </div>

        <div className="px-4 fixed bottom-4 inset-x-0">
          <button
            type="button"
            className="w-full bg-blue-800 text-white text-lg font-medium py-4 rounded"
            onClick={handleProceedToCheckout}
          >
            Proceed to Checkout
          </button>
        </div>

        {/* Pop Up Modal */}
        <div
          className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden"
          id="finger-print-modal"
        >
          <div className="bg-white rounded-3xl p-4 w-full max-w-md">
            <h3 className="text-center text-xl text-gray-800 font-semibold mb-4">
              Choose Payment Method
            </h3>
            <form className="space-y-4">
              {/* Bank of America */}
              <div className="border-b-2 border-gray-200">
                <input
                  type="radio"
                  name="Payment"
                  id="Payment1"
                  className="hidden peer"
                  value="Payment1"
                />
                <label
                  htmlFor="Payment1"
                  className="flex items-center gap-3 py-4 cursor-pointer peer-checked:bg-gray-50"
                >
                  <span className="border border-gray-200 p-2 rounded w-12 h-8 flex items-center justify-center">
                    <svg></svg>
                  </span>
                  <div className="pl-4">
                    <div className="text-gray-800 text-base font-semibold leading-6">
                      Bank of America
                    </div>
                    <div className="text-gray-500 text-sm font-medium leading-5">
                      <span className="text-blue">Active</span> | Card Number
                      **** 4625
                    </div>
                  </div>
                </label>
              </div>

              {/* Master Card */}
              <div className="border-b-2 border-gray-200">
                <input
                  type="radio"
                  name="Payment"
                  id="Payment2"
                  className="hidden peer"
                  defaultChecked
                />
                <label
                  htmlFor="Payment2"
                  className="flex items-center gap-3 py-4 cursor-pointer peer-checked:bg-gray-50"
                >
                  <span className="border border-gray-200 p-2 rounded w-12 h-8 flex items-center justify-center">
                    <svg></svg>
                  </span>
                  <div className="pl-4">
                    <div className="text-gray-800 text-base font-semibold leading-6">
                      Master Card
                    </div>
                    <div className="text-gray-500 text-sm font-medium leading-5">
                      <span className="text-blue">Active</span> | Card Number
                      **** 7887
                    </div>
                  </div>
                </label>
              </div>

              {/* Visa */}
              <div className="border-b-2 border-gray-200">
                <input
                  type="radio"
                  name="Payment"
                  id="Payment3"
                  className="hidden peer"
                />
                <label
                  htmlFor="Payment3"
                  className="flex items-center gap-3 py-4 cursor-pointer peer-checked:bg-gray-50"
                >
                  <span className="border border-gray-200 p-2 rounded w-12 h-8 flex items-center justify-center">
                    <svg></svg>
                  </span>
                  <div className="pl-4">
                    <div className="text-gray-800 text-base font-semibold leading-6">
                      Visa
                    </div>
                    <div className="text-gray-500 text-sm font-medium leading-5">
                      <span className="text-red">Inactive</span> | Card Number
                      **** 2540
                    </div>
                  </div>
                </label>
              </div>

              {/* JPMorgan Bank */}
              <div className="border-b-2 border-gray-200">
                <input
                  type="radio"
                  name="Payment"
                  id="Payment4"
                  className="hidden peer"
                  value="Payment4"
                />
                <label
                  htmlFor="Payment4"
                  className="flex items-center gap-3 py-4 cursor-pointer peer-checked:bg-gray-50"
                >
                  <span className="border border-gray-200 p-2 rounded w-12 h-8 flex items-center justify-center">
                    <svg></svg>
                  </span>
                  <div className="pl-4">
                    <div className="text-gray-800 text-base font-semibold leading-6">
                      JPMorgan Bank
                    </div>
                    <div className="text-gray-500 text-sm font-medium leading-5">
                      <span className="text-blue">Active</span> | Card Number
                      **** 4625
                    </div>
                  </div>
                </label>
              </div>

              {/* Amazon Pay */}
              <div className="border-b-2 border-gray-200">
                <input
                  type="radio"
                  name="Payment"
                  id="Payment5"
                  className="hidden peer"
                />
                <label
                  htmlFor="Payment5"
                  className="flex items-center gap-3 py-4 cursor-pointer peer-checked:bg-gray-50"
                >
                  <span className="border border-gray-200 p-2 rounded w-12 h-8 flex items-center justify-center">
                    <svg></svg>
                  </span>
                  <div className="pl-4">
                    <div className="text-gray-800 text-base font-semibold leading-6">
                      Amazon Pay
                    </div>
                  </div>
                </label>
              </div>
            </form>
          </div>
        </div>
        {/* Pop Up Modal End */}
      </ElementsWrapper>
    </div>
  );
};

export default SubscriptionPayment;


--- C:\Users\hanos\cb\frontend\src\pages\TermsAndPrivacy.jsx ---
import React, { useEffect, useState } from "react";
import buttonBack from "../assets/images/Button-Back.png";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../components/Loader";

const TermsAndPrivacy = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  const handleBackClick = () => {
    navigate(-1);
  };

  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 500);
    return () => clearTimeout(timer);
  }, []);

  if (loading) {
    return <Loader />;
  }

  return (
    <div className="bg-gray-100 min-h-screen pb-4 flex flex-col">
      <div className="h-72 bg-blue-800 bg-top bg-no-repeat">
        <div className="mx-auto max-w-lg p-0">
          <header className="flex items-center pt-8 px-3 max-w-xl">
            <button onClick={handleBackClick} className="p-0">
              <img
                className="inline-block w-8 h-auto"
                src={buttonBack}
                alt="Go Back"
              />
            </button>
            <h1 className="ml-4 text-white font-medium text-lg">
              Terms of Service and Privacy Policy
            </h1>
          </header>
          <div className="bg-white px-4 pt-4 flex flex-col flex-1 items-stretch mt-5 rounded-t-3xl h-screen overflow-y-auto w-full">
            <div className="pt-2.5 pb-4.5 border-b border-gray-200 w-full">
              <p className="text-gray-500 font-medium text-base leading-6 pb-2">
                <strong>Last updated: 31/05/2025</strong>
              </p>
              <p className="text-gray-500 font-medium text-base leading-6 pb-2">
                Welcome to DentGo (“we,” “us,” or “our”). This document
                contains both our Terms of Service and our Privacy Policy. By
                using DentGo’s web app, you agree to comply with these terms
                and acknowledge how we handle your data.
              </p>
              <h2 className="text-gray-500 font-medium text-base leading-6 pb-2">
                1. Introduction
              </h2>
              <p className="text-gray-500 font-medium text-base leading-6 pb-2">
                DentGo is a chatbot web application specializing in dental
                assistance. Our service provides free daily messaging and the
                option to upgrade to a premium subscription for additional
                features.
              </p>
              <h2 className="text-gray-500 font-medium text-base leading-6 pb-2">
                2. Account Registration
              </h2>
              <p className="text-gray-500 font-medium text-base leading-6 pb-2">
                Users must create an account using Google or Apple
                authentication. We do not collect any other login credentials.
                There is no minimum age requirement, but parents or guardians
                should supervise minors’ use.
              </p>
              <h2 className="text-gray-500 font-medium text-base leading-6 pb-2">
                3. Usage Terms
              </h2>
              <p className="text-gray-500 font-medium text-base leading-6 pb-2">
                You may use DentGo to chat with our dental chatbot for
                information and support. Misuse of the service—including but
                not limited to spamming, harassment, or any illegal
                activity—is prohibited. We reserve the right to suspend or
                terminate accounts that violate these terms.
              </p>
              <h2 className="text-gray-500 font-medium text-base leading-6 pb-2">
                4. Subscriptions and Payments
              </h2>
              <p className="text-gray-500 font-medium text-base leading-6 pb-2">
                DentGo offers one free daily message for all users.
                Additional features, such as unlimited messaging, require a
                monthly subscription. Subscription fees are clearly stated
                before purchase and are billed monthly.
              </p>
              <h2 className="text-gray-500 font-medium text-base leading-6 pb-2">
                5. Privacy Policy
              </h2>
              <h3 className="text-gray-500 font-medium text-base leading-6 pb-2">
                5.1 Data Collection
              </h3>
              <p className="text-gray-500 font-medium text-base leading-6 pb-2">
                We only collect your email address via Google or Apple
                sign-in. We store your chatbot conversations to allow you to
                access your chat history. No sensitive health information is
                collected. We do not collect or process any additional
                personal data.
              </p>
              <h3 className="text-gray-500 font-medium text-base leading-6 pb-2">
                5.2 Cookies and Analytics
              </h3>
              <p className="text-gray-500 font-medium text-base leading-6 pb-2">
                We use cookies solely for Google Analytics 4 (GA4) to
                understand usage patterns and improve the service.
              </p>
              <h3 className="text-gray-500 font-medium text-base leading-6 pb-2">
                5.3 Data Sharing
              </h3>
              <p className="text-gray-500 font-medium text-base leading-6 pb-2">
                We do <strong>not</strong> share your data with third parties.
                Your information is used strictly for providing and improving
                the DentGo service.
              </p>
              <h3 className="text-gray-500 font-medium text-base leading-6 pb-2">
                5.4 Data Security
              </h3>
              <p className="text-gray-500 font-medium text-base leading-6 pb-2">
                We use industry-standard encryption and secure hosting to
                protect your data.
              </p>
              <h2 className="text-gray-500 font-medium text-base leading-6 pb-2">
                6. Jurisdiction
              </h2>
              <p className="text-gray-500 font-medium text-base leading-6 pb-2">
                DentGo is based in Wyoming, USA. These Terms and Privacy
                Policy are governed by the laws of Wyoming and the United
                States.
              </p>
              <h2 className="text-gray-500 font-medium text-base leading-6 pb-2">
                7. Contact Us
              </h2>
              <p className="text-gray-500 font-medium text-base leading-6 pb-2">
                If you have any questions about these Terms or our Privacy
                practices, please contact us at: cs@dentgo.ai.
              </p>
              <h2 className="text-gray-500 font-medium text-base leading-6 pb-2">
                8. Updates
              </h2>
              <p className="text-gray-500 font-medium text-base leading-6 pb-2">
                We may update these Terms and Privacy Policy from time to
                time. Changes will be posted on this page with the new
                effective date.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TermsAndPrivacy;


